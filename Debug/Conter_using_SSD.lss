
Conter_using_SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00003d76  00003e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080008c  0080008c  00003e36  2**0
                  ALLOC
  3 .stab         000040e0  00000000  00000000  00003e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002277  00000000  00000000  00007f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a18f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a47e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e548  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e98a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_2>
       c:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_10>
      2c:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <main>
      8a:	0c 94 b9 1e 	jmp	0x3d72	; 0x3d72 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <WDT_voidEnable>:
#include "WDT_config.h"
#include "WDT_private.h"
#include "WDT_interface.h"


void WDT_voidEnable(WDT_prescalar_t Copy_Choosen_Time){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01

	/*Set the choosen time*/
	WDT_WDTCR_REG = Copy_Choosen_Time;
     caa:	e1 e4       	ldi	r30, 0x41	; 65
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	80 83       	st	Z, r24
	/*Start using the watch dog timer*/
	WDT_WDTCR_REG |= (1<<3);
     cb2:	a1 e4       	ldi	r26, 0x41	; 65
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e1 e4       	ldi	r30, 0x41	; 65
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	88 60       	ori	r24, 0x08	; 8
     cbe:	8c 93       	st	X, r24

}
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <WDT_voidDisable>:
void WDT_voidDisable(void){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62

	/*Stop WDT*/
	WDT_WDTCR_REG |= (0x2<<3);
     cd0:	a1 e4       	ldi	r26, 0x41	; 65
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e1 e4       	ldi	r30, 0x41	; 65
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 61       	ori	r24, 0x10	; 16
     cdc:	8c 93       	st	X, r24
	/*Reset the value of WDT to use it again*/
	WDT_WDTCR_REG = 0x00;
     cde:	e1 e4       	ldi	r30, 0x41	; 65
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	10 82       	st	Z, r1
}
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <TIMERS_voidInit>:
#include "TIMERS_config.h"
#include "TIMERS_interface.h"

#include <avr/interrupt.h>

void TIMERS_voidInit(TIMER_Config_t* Timer_conf){
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <TIMERS_voidInit+0x6>
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <TIMERS_voidInit+0x8>
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <TIMERS_voidInit+0xa>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01

	switch(Timer_conf->T_ID){
     cfc:	e9 81       	ldd	r30, Y+1	; 0x01
     cfe:	fa 81       	ldd	r31, Y+2	; 0x02
     d00:	80 81       	ld	r24, Z
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	09 f0       	breq	.+2      	; 0xd0c <TIMERS_voidInit+0x22>
     d0a:	f2 c0       	rjmp	.+484    	; 0xef0 <TIMERS_voidInit+0x206>
	case TIMER0_ID:

		switch(Timer_conf->T_Mode){
     d0c:	e9 81       	ldd	r30, Y+1	; 0x01
     d0e:	fa 81       	ldd	r31, Y+2	; 0x02
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3e 83       	std	Y+6, r19	; 0x06
     d18:	2d 83       	std	Y+5, r18	; 0x05
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <TIMERS_voidInit+0x3c>
     d24:	67 c0       	rjmp	.+206    	; 0xdf4 <TIMERS_voidInit+0x10a>
     d26:	2d 81       	ldd	r18, Y+5	; 0x05
     d28:	3e 81       	ldd	r19, Y+6	; 0x06
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <TIMERS_voidInit+0x50>
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	69 f0       	breq	.+26     	; 0xd52 <TIMERS_voidInit+0x68>
     d38:	88 c0       	rjmp	.+272    	; 0xe4a <TIMERS_voidInit+0x160>
     d3a:	2d 81       	ldd	r18, Y+5	; 0x05
     d3c:	3e 81       	ldd	r19, Y+6	; 0x06
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	b1 f1       	breq	.+108    	; 0xdb0 <TIMERS_voidInit+0xc6>
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	83 30       	cpi	r24, 0x03	; 3
     d4a:	91 05       	cpc	r25, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <TIMERS_voidInit+0x66>
     d4e:	68 c0       	rjmp	.+208    	; 0xe20 <TIMERS_voidInit+0x136>
     d50:	7c c0       	rjmp	.+248    	; 0xe4a <TIMERS_voidInit+0x160>
			 * waveform generation unit.
			 * The OC0 output is changed according to COM01:00 setting.
			 * so we will make these 2 bit to zero.
			 * It always read as zero.
			 */
			SET_BIT(TIMERS_TCCR0_REG,FOC0_BIT);
     d52:	a3 e5       	ldi	r26, 0x53	; 83
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e3 e5       	ldi	r30, 0x53	; 83
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	8c 93       	st	X, r24

			/* To Set the source of maximum counter value TOP = 0xFF.
			 * It as OVF Mode  */
			CLR_BIT(TIMERS_TCCR0_REG,WGM00_BIT);
     d60:	a3 e5       	ldi	r26, 0x53	; 83
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e3 e5       	ldi	r30, 0x53	; 83
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8f 7b       	andi	r24, 0xBF	; 191
     d6c:	8c 93       	st	X, r24
			CLR_BIT(TIMERS_TCCR0_REG,WGM01_BIT);
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	8c 93       	st	X, r24

			switch(Timer_conf->Tech){
     d7c:	e9 81       	ldd	r30, Y+1	; 0x01
     d7e:	fa 81       	ldd	r31, Y+2	; 0x02
     d80:	84 81       	ldd	r24, Z+4	; 0x04
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	3c 83       	std	Y+4, r19	; 0x04
     d88:	2b 83       	std	Y+3, r18	; 0x03
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	09 f4       	brne	.+2      	; 0xd94 <TIMERS_voidInit+0xaa>
     d92:	5b c0       	rjmp	.+182    	; 0xe4a <TIMERS_voidInit+0x160>
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	3c 81       	ldd	r19, Y+4	; 0x04
     d98:	21 30       	cpi	r18, 0x01	; 1
     d9a:	31 05       	cpc	r19, r1
     d9c:	09 f0       	breq	.+2      	; 0xda0 <TIMERS_voidInit+0xb6>
     d9e:	55 c0       	rjmp	.+170    	; 0xe4a <TIMERS_voidInit+0x160>
			case Polling:
				break;
			case Interrupt:
				//Enable OFlow PIE
				SET_BIT(TIMERS_TIMSK_REG,TOIE0_BIT);
     da0:	a9 e5       	ldi	r26, 0x59	; 89
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e9 e5       	ldi	r30, 0x59	; 89
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	8c 93       	st	X, r24
     dae:	4d c0       	rjmp	.+154    	; 0xe4a <TIMERS_voidInit+0x160>
				break;
			}
			break;
			case Compare_mode:
				SET_BIT(TIMERS_TCCR0_REG,FOC0_BIT);
     db0:	a3 e5       	ldi	r26, 0x53	; 83
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e3 e5       	ldi	r30, 0x53	; 83
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	8c 93       	st	X, r24
				/* To Set it as CTC MODE
				 * Top is OCR0
				 */
				CLR_BIT(TIMERS_TCCR0_REG,WGM00_BIT);
     dbe:	a3 e5       	ldi	r26, 0x53	; 83
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e3 e5       	ldi	r30, 0x53	; 83
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7b       	andi	r24, 0xBF	; 191
     dca:	8c 93       	st	X, r24
				SET_BIT(TIMERS_TCCR0_REG,WGM01_BIT);
     dcc:	a3 e5       	ldi	r26, 0x53	; 83
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e3 e5       	ldi	r30, 0x53	; 83
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	8c 93       	st	X, r24

				if(Timer_conf->Tech== Interrupt){
     dda:	e9 81       	ldd	r30, Y+1	; 0x01
     ddc:	fa 81       	ldd	r31, Y+2	; 0x02
     dde:	84 81       	ldd	r24, Z+4	; 0x04
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	99 f5       	brne	.+102    	; 0xe4a <TIMERS_voidInit+0x160>
					//Enable CTC PIE
					SET_BIT(TIMERS_TIMSK_REG,OCIE0_BIT);
     de4:	a9 e5       	ldi	r26, 0x59	; 89
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e9 e5       	ldi	r30, 0x59	; 89
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	8c 93       	st	X, r24
     df2:	2b c0       	rjmp	.+86     	; 0xe4a <TIMERS_voidInit+0x160>
				else{
					//Do Nothing
				}
				break;
			case PWM_phase_corr:
				CLR_BIT(TIMERS_TCCR0_REG,FOC0_BIT);
     df4:	a3 e5       	ldi	r26, 0x53	; 83
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e3 e5       	ldi	r30, 0x53	; 83
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 77       	andi	r24, 0x7F	; 127
     e00:	8c 93       	st	X, r24
				SET_BIT(TIMERS_TCCR0_REG , WGM00_BIT);
     e02:	a3 e5       	ldi	r26, 0x53	; 83
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e3 e5       	ldi	r30, 0x53	; 83
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	80 64       	ori	r24, 0x40	; 64
     e0e:	8c 93       	st	X, r24
				CLR_BIT(TIMERS_TCCR0_REG , WGM01_BIT);
     e10:	a3 e5       	ldi	r26, 0x53	; 83
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e3 e5       	ldi	r30, 0x53	; 83
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	87 7f       	andi	r24, 0xF7	; 247
     e1c:	8c 93       	st	X, r24
     e1e:	15 c0       	rjmp	.+42     	; 0xe4a <TIMERS_voidInit+0x160>

				break;

			case Fast_PWM:
				CLR_BIT(TIMERS_TCCR0_REG,FOC0_BIT);
     e20:	a3 e5       	ldi	r26, 0x53	; 83
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e3 e5       	ldi	r30, 0x53	; 83
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 77       	andi	r24, 0x7F	; 127
     e2c:	8c 93       	st	X, r24
				SET_BIT(TIMERS_TCCR0_REG , WGM00_BIT);
     e2e:	a3 e5       	ldi	r26, 0x53	; 83
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e3 e5       	ldi	r30, 0x53	; 83
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 64       	ori	r24, 0x40	; 64
     e3a:	8c 93       	st	X, r24
				SET_BIT(TIMERS_TCCR0_REG , WGM01_BIT);
     e3c:	a3 e5       	ldi	r26, 0x53	; 83
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e3 e5       	ldi	r30, 0x53	; 83
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 60       	ori	r24, 0x08	; 8
     e48:	8c 93       	st	X, r24
		 * [  0	 ,	0  ] >>0>> Normal operation, OCX is disconeccted.
		 * [  0	 ,	1  ] >>1>> Toggle OCX in OVF,CTC & Reserved in PWM Mode.
		 * [  1	 ,	0  ] >>2>> Clear OCX on compare match, [Set OC0 at bottom = Non inverting].
		 * [  1	 ,	1  ] >>3>> Set OCX on compare match,   [Clear OC0 at bottom = Inverting].
		 * */
		TIMERS_TCCR0_REG &= 0xCF; // 0x11001111 clearing [COM00,COM01]
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 7c       	andi	r24, 0xCF	; 207
     e56:	8c 93       	st	X, r24
		if( ( Timer_conf->T_CompareOutput ) == TOGGLE_OCX ){
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	f1 f4       	brne	.+60     	; 0xe9e <TIMERS_voidInit+0x1b4>
			if( ( (Timer_conf->T_Mode) == Fast_PWM ) ||( (Timer_conf->T_Mode) == PWM_phase_corr ) ){
     e62:	e9 81       	ldd	r30, Y+1	; 0x01
     e64:	fa 81       	ldd	r31, Y+2	; 0x02
     e66:	81 81       	ldd	r24, Z+1	; 0x01
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	61 f1       	breq	.+88     	; 0xec4 <TIMERS_voidInit+0x1da>
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	81 81       	ldd	r24, Z+1	; 0x01
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	39 f1       	breq	.+78     	; 0xec4 <TIMERS_voidInit+0x1da>
				//#warning ("Unavailable Copmare Output mode [RESERVED].");
			}
			else{
				TIMERS_TCCR0_REG |= ((Timer_conf->T_CompareOutput) << 4);
     e76:	a3 e5       	ldi	r26, 0x53	; 83
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e3 e5       	ldi	r30, 0x53	; 83
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	28 2f       	mov	r18, r24
     e82:	e9 81       	ldd	r30, Y+1	; 0x01
     e84:	fa 81       	ldd	r31, Y+2	; 0x02
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	82 95       	swap	r24
     e8e:	92 95       	swap	r25
     e90:	90 7f       	andi	r25, 0xF0	; 240
     e92:	98 27       	eor	r25, r24
     e94:	80 7f       	andi	r24, 0xF0	; 240
     e96:	98 27       	eor	r25, r24
     e98:	82 2b       	or	r24, r18
     e9a:	8c 93       	st	X, r24
     e9c:	13 c0       	rjmp	.+38     	; 0xec4 <TIMERS_voidInit+0x1da>
			}
		}
		else{
			TIMERS_TCCR0_REG |= ((Timer_conf->T_CompareOutput) << 4);
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	28 2f       	mov	r18, r24
     eaa:	e9 81       	ldd	r30, Y+1	; 0x01
     eac:	fa 81       	ldd	r31, Y+2	; 0x02
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	82 95       	swap	r24
     eb6:	92 95       	swap	r25
     eb8:	90 7f       	andi	r25, 0xF0	; 240
     eba:	98 27       	eor	r25, r24
     ebc:	80 7f       	andi	r24, 0xF0	; 240
     ebe:	98 27       	eor	r25, r24
     ec0:	82 2b       	or	r24, r18
     ec2:	8c 93       	st	X, r24
		 * [ 0	,  0  , 1 ] >>1>> THE TIMER CLOCK = CPU CLOCK.
		 * [ 0	,  1 ,  0 ] >>2>> THE TIMER CLOCK = CPU CLOCK / 8.
		 *
		 * [ 1	,  1  , 1 ] >>7>> EXTERNAL CLOCK SRC ON T0 PIN, RISING EDGE.
		 */
		TIMERS_TCCR0_REG &= 0xF8;	// 0x11111000 (CLEAR LS 3 BITS [CS02,CS01,CS00])
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 7f       	andi	r24, 0xF8	; 248
     ed0:	8c 93       	st	X, r24
		TIMERS_TCCR0_REG |= ((Timer_conf->T_Prescaler) & 0x07 );
     ed2:	a3 e5       	ldi	r26, 0x53	; 83
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e3 e5       	ldi	r30, 0x53	; 83
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	98 2f       	mov	r25, r24
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	83 81       	ldd	r24, Z+3	; 0x03
     ee4:	87 70       	andi	r24, 0x07	; 7
     ee6:	89 2b       	or	r24, r25
     ee8:	8c 93       	st	X, r24

		/* Reset the Timer/Counter Register 8bit */
		TIMERS_TCNT0_REG = 0;
     eea:	e2 e5       	ldi	r30, 0x52	; 82
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	10 82       	st	Z, r1
			break;
	}



}
     ef0:	26 96       	adiw	r28, 0x06	; 6
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <TIMERS_voidTIM0Start>:

void TIMERS_voidTIM0Start(TIMER_Config_t * Timer_conf){
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <TIMERS_voidTIM0Start+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <TIMERS_voidTIM0Start+0x8>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	switch(Timer_conf->T_Mode){
     f12:	e9 81       	ldd	r30, Y+1	; 0x01
     f14:	fa 81       	ldd	r31, Y+2	; 0x02
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3c 83       	std	Y+4, r19	; 0x04
     f1e:	2b 83       	std	Y+3, r18	; 0x03
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	91 05       	cpc	r25, r1
     f28:	51 f1       	breq	.+84     	; 0xf7e <TIMERS_voidTIM0Start+0x7c>
     f2a:	2b 81       	ldd	r18, Y+3	; 0x03
     f2c:	3c 81       	ldd	r19, Y+4	; 0x04
     f2e:	23 30       	cpi	r18, 0x03	; 3
     f30:	31 05       	cpc	r19, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <TIMERS_voidTIM0Start+0x34>
     f34:	49 c0       	rjmp	.+146    	; 0xfc8 <TIMERS_voidTIM0Start+0xc6>
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f0       	breq	.+2      	; 0xf40 <TIMERS_voidTIM0Start+0x3e>
     f3e:	4c c0       	rjmp	.+152    	; 0xfd8 <TIMERS_voidTIM0Start+0xd6>
	case Normal_mode_OVF:
		TIMERS_TCNT0_REG = Timer_conf->PreloadValue;
     f40:	a2 e5       	ldi	r26, 0x52	; 82
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e9 81       	ldd	r30, Y+1	; 0x01
     f46:	fa 81       	ldd	r31, Y+2	; 0x02
     f48:	85 81       	ldd	r24, Z+5	; 0x05
     f4a:	8c 93       	st	X, r24
		// Configure the flag
		switch(Timer_conf->Tech){
     f4c:	e9 81       	ldd	r30, Y+1	; 0x01
     f4e:	fa 81       	ldd	r31, Y+2	; 0x02
     f50:	84 81       	ldd	r24, Z+4	; 0x04
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	09 f0       	breq	.+2      	; 0xf5c <TIMERS_voidTIM0Start+0x5a>
     f5a:	3e c0       	rjmp	.+124    	; 0xfd8 <TIMERS_voidTIM0Start+0xd6>
		case Polling:
			//WAITing until timer finish counting
			while(GET_BIT(TIMERS_TIFR_REG,TOV0_BIT)==0);
     f5c:	e8 e5       	ldi	r30, 0x58	; 88
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	b9 f3       	breq	.-18     	; 0xf5c <TIMERS_voidTIM0Start+0x5a>
			// set it to clear the flag
			SET_BIT(TIMERS_TIFR_REG,TOV0_BIT);
     f6e:	a8 e5       	ldi	r26, 0x58	; 88
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e8 e5       	ldi	r30, 0x58	; 88
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	8c 93       	st	X, r24
     f7c:	2d c0       	rjmp	.+90     	; 0xfd8 <TIMERS_voidTIM0Start+0xd6>
			break;

		}
		break;
		case Compare_mode:
			TIMERS_TCNT0_REG = Timer_conf->PreloadValue;
     f7e:	a2 e5       	ldi	r26, 0x52	; 82
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e9 81       	ldd	r30, Y+1	; 0x01
     f84:	fa 81       	ldd	r31, Y+2	; 0x02
     f86:	85 81       	ldd	r24, Z+5	; 0x05
     f88:	8c 93       	st	X, r24
			TIMERS_OCR0_REG =Timer_conf->CompareValue;
     f8a:	ac e5       	ldi	r26, 0x5C	; 92
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	86 81       	ldd	r24, Z+6	; 0x06
     f94:	8c 93       	st	X, r24
			switch(Timer_conf->Tech){
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	84 81       	ldd	r24, Z+4	; 0x04
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	d1 f4       	brne	.+52     	; 0xfd8 <TIMERS_voidTIM0Start+0xd6>
			case Polling:
				//WAITing until timer finish counting
				while(GET_BIT(TIMERS_TIFR_REG,OCF0_BIT) == 0);
     fa4:	e8 e5       	ldi	r30, 0x58	; 88
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	86 95       	lsr	r24
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	81 70       	andi	r24, 0x01	; 1
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	b1 f3       	breq	.-20     	; 0xfa4 <TIMERS_voidTIM0Start+0xa2>
				SET_BIT(TIMERS_TIFR_REG,OCF0_BIT);
     fb8:	a8 e5       	ldi	r26, 0x58	; 88
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e8 e5       	ldi	r30, 0x58	; 88
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	8c 93       	st	X, r24
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <TIMERS_voidTIM0Start+0xd6>
			}
			break;
			case Fast_PWM:
				// SET ICR0 (TOP) and it's default by zero
				//SET OCR
				TIMERS_OCR0_REG =Timer_conf->CompareValue;
     fc8:	ec e5       	ldi	r30, 0x5C	; 92
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	a9 81       	ldd	r26, Y+1	; 0x01
     fce:	ba 81       	ldd	r27, Y+2	; 0x02
     fd0:	16 96       	adiw	r26, 0x06	; 6
     fd2:	8c 91       	ld	r24, X
     fd4:	16 97       	sbiw	r26, 0x06	; 6
     fd6:	80 83       	st	Z, r24

			default:
				break;

	}
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <TIMERS_voidTIM0SetPreloadVal>:

void TIMERS_voidTIM0SetPreloadVal(u8 Copy_u8Preload){
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_TCNT0_REG = Copy_u8Preload;
     ff2:	e2 e5       	ldi	r30, 0x52	; 82
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	80 83       	st	Z, r24
}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <TIMERS_voidTIM0GetTimerVal>:
void TIMERS_voidTIM0GetTimerVal(u8 * PreLoadVal){
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <TIMERS_voidTIM0GetTimerVal+0x6>
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	9a 83       	std	Y+2, r25	; 0x02
    100e:	89 83       	std	Y+1, r24	; 0x01
	*PreLoadVal = TIMERS_TCNT0_REG;
    1010:	e2 e5       	ldi	r30, 0x52	; 82
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	80 83       	st	Z, r24
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <TIMERS_voidTIM0SetCompareVal>:

void TIMERS_voidTIM0SetCompareVal(u8 Copy_u8Compare){
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_OCR0_REG = Copy_u8Compare;
    1032:	ec e5       	ldi	r30, 0x5C	; 92
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	80 83       	st	Z, r24
}
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <TIMERS_voidTIM0_Enable_OVF_Interrupt>:

void TIMERS_voidTIM0_Enable_OVF_Interrupt(){
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMERS_TIMSK_REG,TOIE0_BIT);
    104a:	a9 e5       	ldi	r26, 0x59	; 89
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e9 e5       	ldi	r30, 0x59	; 89
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	81 60       	ori	r24, 0x01	; 1
    1056:	8c 93       	st	X, r24
}
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <TIMERS_voidTIM0_Disable_OVF_Interrupt>:
void TIMERS_voidTIM0_Disable_OVF_Interrupt(){
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMERS_TIMSK_REG,TOIE0_BIT);
    1066:	a9 e5       	ldi	r26, 0x59	; 89
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e9 e5       	ldi	r30, 0x59	; 89
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8e 7f       	andi	r24, 0xFE	; 254
    1072:	8c 93       	st	X, r24
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TIMERS_voidTIM0_Enable_CTC_Interrupt>:
void TIMERS_voidTIM0_Enable_CTC_Interrupt(){
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMERS_TIMSK_REG,OCIE0_BIT);
    1082:	a9 e5       	ldi	r26, 0x59	; 89
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e9 e5       	ldi	r30, 0x59	; 89
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	8c 93       	st	X, r24
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <TIMERS_voidTIM0_Disable_CTC_Interrupt>:
void TIMERS_voidTIM0_Disable_CTC_Interrupt(){
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMERS_TIMSK_REG,OCIE0_BIT);
    109e:	a9 e5       	ldi	r26, 0x59	; 89
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 e5       	ldi	r30, 0x59	; 89
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8d 7f       	andi	r24, 0xFD	; 253
    10aa:	8c 93       	st	X, r24
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TIMERS_voidTIM0DeInit>:

void TIMERS_voidTIM0DeInit(void){
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	TIMERS_TCCR0_REG =0;
    10ba:	e3 e5       	ldi	r30, 0x53	; 83
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	10 82       	st	Z, r1
	TIMERS_TCNT0_REG=0;
    10c0:	e2 e5       	ldi	r30, 0x52	; 82
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	10 82       	st	Z, r1
	TIMERS_OCR0_REG =0;
    10c6:	ec e5       	ldi	r30, 0x5C	; 92
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	10 82       	st	Z, r1
	TIMERS_TIMSK_REG&= 0xFC;
    10cc:	a9 e5       	ldi	r26, 0x59	; 89
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e9 e5       	ldi	r30, 0x59	; 89
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8c 7f       	andi	r24, 0xFC	; 252
    10d8:	8c 93       	st	X, r24
}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TIMERS_voidTIM0_TIM1_PrescalerRESET>:

void TIMERS_voidTIM0_TIM1_PrescalerRESET(){
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMERS_SFIOR_REG,PSR10_BIT);
    10e8:	a0 e5       	ldi	r26, 0x50	; 80
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e0 e5       	ldi	r30, 0x50	; 80
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	8c 93       	st	X, r24
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <TIMERS_voidTIM0SetCallBackFunction>:



static void (*Global_PtrToFun)(void) = NULL_PTR;
//REGISTERING FUNCTION
void TIMERS_voidTIM0SetCallBackFunction(void (*ptrToFun) (void)){
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <TIMERS_voidTIM0SetCallBackFunction+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
	Global_PtrToFun = ptrToFun;
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	90 93 8d 00 	sts	0x008D, r25
    1112:	80 93 8c 00 	sts	0x008C, r24
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <__vector_11>:

ISR(TIMER0_OVF_vect){
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	if(Global_PtrToFun!= NULL_PTR){
    114a:	80 91 8c 00 	lds	r24, 0x008C
    114e:	90 91 8d 00 	lds	r25, 0x008D
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	29 f0       	breq	.+10     	; 0x1160 <__vector_11+0x40>
		(*Global_PtrToFun)();
    1156:	e0 91 8c 00 	lds	r30, 0x008C
    115a:	f0 91 8d 00 	lds	r31, 0x008D
    115e:	09 95       	icall
	}
	//	(*Global_PtrToFun)();
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_10>:

ISR(TIMER0_COMP_vect){
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	if(Global_PtrToFun!= NULL_PTR){
    11b0:	80 91 8c 00 	lds	r24, 0x008C
    11b4:	90 91 8d 00 	lds	r25, 0x008D
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	29 f0       	breq	.+10     	; 0x11c6 <__vector_10+0x40>
		Global_PtrToFun();
    11bc:	e0 91 8c 00 	lds	r30, 0x008C
    11c0:	f0 91 8d 00 	lds	r31, 0x008D
    11c4:	09 95       	icall
	}

}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0
    11e8:	1f 90       	pop	r1
    11ea:	18 95       	reti

000011ec <GIE_voidEnable>:
#include "../../LIB/BIT_MATH.h"


/* Because you are in the mcal so you can't now use the DIO*/

void GIE_voidEnable		(void){
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG_REG,7);
    11f4:	af e5       	ldi	r26, 0x5F	; 95
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	ef e5       	ldi	r30, 0x5F	; 95
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	80 68       	ori	r24, 0x80	; 128
    1200:	8c 93       	st	X, r24

}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <GIE_voidDisable>:
void GIE_voidDisable	(void){
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,7);
    1210:	af e5       	ldi	r26, 0x5F	; 95
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e5       	ldi	r30, 0x5F	; 95
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 77       	andi	r24, 0x7F	; 127
    121c:	8c 93       	st	X, r24
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <EXTI_voidChangeSenseControl>:



static void (*Glo_ApfNotification [3] ) ( void ) = { NULL_PTR , NULL_PTR , NULL_PTR } ;

void EXTI_voidChangeSenseControl(u8 Copy_u8IntId	,	u8 Copy_u8SenseControl	){
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	2a 97       	sbiw	r28, 0x0a	; 10
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8IntId){
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3a 87       	std	Y+10, r19	; 0x0a
    1244:	29 87       	std	Y+9, r18	; 0x09
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <EXTI_voidChangeSenseControl+0x2e>
    1250:	66 c0       	rjmp	.+204    	; 0x131e <EXTI_voidChangeSenseControl+0xfa>
    1252:	29 85       	ldd	r18, Y+9	; 0x09
    1254:	3a 85       	ldd	r19, Y+10	; 0x0a
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <EXTI_voidChangeSenseControl+0x3a>
    125c:	bb c0       	rjmp	.+374    	; 0x13d4 <EXTI_voidChangeSenseControl+0x1b0>
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	09 f0       	breq	.+2      	; 0x1268 <EXTI_voidChangeSenseControl+0x44>
    1266:	d4 c0       	rjmp	.+424    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>

	case EXTI_INT0:

		switch(Copy_u8SenseControl){
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	38 87       	std	Y+8, r19	; 0x08
    1270:	2f 83       	std	Y+7, r18	; 0x07
    1272:	8f 81       	ldd	r24, Y+7	; 0x07
    1274:	98 85       	ldd	r25, Y+8	; 0x08
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	21 f1       	breq	.+72     	; 0x12c4 <EXTI_voidChangeSenseControl+0xa0>
    127c:	2f 81       	ldd	r18, Y+7	; 0x07
    127e:	38 85       	ldd	r19, Y+8	; 0x08
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	2c f4       	brge	.+10     	; 0x1290 <EXTI_voidChangeSenseControl+0x6c>
    1286:	8f 81       	ldd	r24, Y+7	; 0x07
    1288:	98 85       	ldd	r25, Y+8	; 0x08
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	61 f0       	breq	.+24     	; 0x12a6 <EXTI_voidChangeSenseControl+0x82>
    128e:	c0 c0       	rjmp	.+384    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>
    1290:	2f 81       	ldd	r18, Y+7	; 0x07
    1292:	38 85       	ldd	r19, Y+8	; 0x08
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	99 f1       	breq	.+102    	; 0x1300 <EXTI_voidChangeSenseControl+0xdc>
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	91 05       	cpc	r25, r1
    12a2:	f9 f0       	breq	.+62     	; 0x12e2 <EXTI_voidChangeSenseControl+0xbe>
    12a4:	b5 c0       	rjmp	.+362    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,1);
    12a6:	a5 e5       	ldi	r26, 0x55	; 85
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e5       	ldi	r30, 0x55	; 85
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG,0);
    12b4:	a5 e5       	ldi	r26, 0x55	; 85
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e5       	ldi	r30, 0x55	; 85
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	81 60       	ori	r24, 0x01	; 1
    12c0:	8c 93       	st	X, r24
    12c2:	a6 c0       	rjmp	.+332    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>

			break;
		case EXTI_FAILING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,1);
    12c4:	a5 e5       	ldi	r26, 0x55	; 85
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e5 e5       	ldi	r30, 0x55	; 85
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	82 60       	ori	r24, 0x02	; 2
    12d0:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG,0);
    12d2:	a5 e5       	ldi	r26, 0x55	; 85
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e5       	ldi	r30, 0x55	; 85
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8e 7f       	andi	r24, 0xFE	; 254
    12de:	8c 93       	st	X, r24
    12e0:	97 c0       	rjmp	.+302    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>


			break;
		case EXTI_ON_CHANGE_LEVEL:
			SET_BIT(EXTI_MCUCR_REG,0);
    12e2:	a5 e5       	ldi	r26, 0x55	; 85
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e5       	ldi	r30, 0x55	; 85
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG,1);
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e5       	ldi	r30, 0x55	; 85
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8d 7f       	andi	r24, 0xFD	; 253
    12fc:	8c 93       	st	X, r24
    12fe:	88 c0       	rjmp	.+272    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>

			break;
		case EXTI_LOW_LEVEL:
			CLR_BIT(EXTI_MCUCR_REG,1);
    1300:	a5 e5       	ldi	r26, 0x55	; 85
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e5       	ldi	r30, 0x55	; 85
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8d 7f       	andi	r24, 0xFD	; 253
    130c:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG,0);
    130e:	a5 e5       	ldi	r26, 0x55	; 85
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e5 e5       	ldi	r30, 0x55	; 85
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8e 7f       	andi	r24, 0xFE	; 254
    131a:	8c 93       	st	X, r24
    131c:	79 c0       	rjmp	.+242    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>
		}

		break;

		case EXTI_INT1:
			switch(Copy_u8SenseControl){
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3e 83       	std	Y+6, r19	; 0x06
    1326:	2d 83       	std	Y+5, r18	; 0x05
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	91 05       	cpc	r25, r1
    1330:	21 f1       	breq	.+72     	; 0x137a <EXTI_voidChangeSenseControl+0x156>
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	2c f4       	brge	.+10     	; 0x1346 <EXTI_voidChangeSenseControl+0x122>
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	61 f0       	breq	.+24     	; 0x135c <EXTI_voidChangeSenseControl+0x138>
    1344:	65 c0       	rjmp	.+202    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>
    1346:	2d 81       	ldd	r18, Y+5	; 0x05
    1348:	3e 81       	ldd	r19, Y+6	; 0x06
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	99 f1       	breq	.+102    	; 0x13b6 <EXTI_voidChangeSenseControl+0x192>
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	f9 f0       	breq	.+62     	; 0x1398 <EXTI_voidChangeSenseControl+0x174>
    135a:	5a c0       	rjmp	.+180    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>
			case EXTI_RISING_EDGE:
				SET_BIT(EXTI_MCUCR_REG,3);
    135c:	a5 e5       	ldi	r26, 0x55	; 85
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e5       	ldi	r30, 0x55	; 85
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	88 60       	ori	r24, 0x08	; 8
    1368:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,2);
    136a:	a5 e5       	ldi	r26, 0x55	; 85
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e5       	ldi	r30, 0x55	; 85
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	84 60       	ori	r24, 0x04	; 4
    1376:	8c 93       	st	X, r24
    1378:	4b c0       	rjmp	.+150    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>

				break;
			case EXTI_FAILING_EDGE:
				SET_BIT(EXTI_MCUCR_REG,3);
    137a:	a5 e5       	ldi	r26, 0x55	; 85
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e5 e5       	ldi	r30, 0x55	; 85
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,2);
    1388:	a5 e5       	ldi	r26, 0x55	; 85
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e5       	ldi	r30, 0x55	; 85
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8b 7f       	andi	r24, 0xFB	; 251
    1394:	8c 93       	st	X, r24
    1396:	3c c0       	rjmp	.+120    	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>


				break;
			case EXTI_ON_CHANGE_LEVEL:
				CLR_BIT(EXTI_MCUCR_REG,3);
    1398:	a5 e5       	ldi	r26, 0x55	; 85
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e5       	ldi	r30, 0x55	; 85
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	87 7f       	andi	r24, 0xF7	; 247
    13a4:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,2);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	84 60       	ori	r24, 0x04	; 4
    13b2:	8c 93       	st	X, r24
    13b4:	2d c0       	rjmp	.+90     	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>


				break;
			case EXTI_LOW_LEVEL:
				CLR_BIT(EXTI_MCUCR_REG,3);
    13b6:	a5 e5       	ldi	r26, 0x55	; 85
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e5 e5       	ldi	r30, 0x55	; 85
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	87 7f       	andi	r24, 0xF7	; 247
    13c2:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,2);
    13c4:	a5 e5       	ldi	r26, 0x55	; 85
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e5       	ldi	r30, 0x55	; 85
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8b 7f       	andi	r24, 0xFB	; 251
    13d0:	8c 93       	st	X, r24
    13d2:	1e c0       	rjmp	.+60     	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>
				break;
			}
			break;
			case EXTI_INT2:
				switch(Copy_u8SenseControl){
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3c 83       	std	Y+4, r19	; 0x04
    13dc:	2b 83       	std	Y+3, r18	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	31 f0       	breq	.+12     	; 0x13f2 <EXTI_voidChangeSenseControl+0x1ce>
    13e6:	2b 81       	ldd	r18, Y+3	; 0x03
    13e8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ea:	21 30       	cpi	r18, 0x01	; 1
    13ec:	31 05       	cpc	r19, r1
    13ee:	49 f0       	breq	.+18     	; 0x1402 <EXTI_voidChangeSenseControl+0x1de>
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>
				case EXTI_RISING_EDGE:
					SET_BIT(EXTI_MCUCSR_REG,6);
    13f2:	a4 e5       	ldi	r26, 0x54	; 84
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e4 e5       	ldi	r30, 0x54	; 84
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 64       	ori	r24, 0x40	; 64
    13fe:	8c 93       	st	X, r24
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <EXTI_voidChangeSenseControl+0x1ec>


					break;
				case EXTI_FAILING_EDGE:

					CLR_BIT(EXTI_MCUCSR_REG,6);
    1402:	a4 e5       	ldi	r26, 0x54	; 84
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e4 e5       	ldi	r30, 0x54	; 84
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 7b       	andi	r24, 0xBF	; 191
    140e:	8c 93       	st	X, r24
				}
				break;

	}

}
    1410:	2a 96       	adiw	r28, 0x0a	; 10
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <EXTI_voidEnable>:

void EXTI_voidEnable	(u8 Copy_u8IntId){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <EXTI_voidEnable+0x6>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntId){
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3b 83       	std	Y+3, r19	; 0x03
    1438:	2a 83       	std	Y+2, r18	; 0x02
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	89 f0       	breq	.+34     	; 0x1466 <EXTI_voidEnable+0x44>
    1444:	2a 81       	ldd	r18, Y+2	; 0x02
    1446:	3b 81       	ldd	r19, Y+3	; 0x03
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	a1 f0       	breq	.+40     	; 0x1476 <EXTI_voidEnable+0x54>
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	9b 81       	ldd	r25, Y+3	; 0x03
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	b9 f4       	brne	.+46     	; 0x1484 <EXTI_voidEnable+0x62>

	case EXTI_INT0:

		SET_BIT(EXTI_GICR_REG,EXTI_INT0_BIT);
    1456:	ab e5       	ldi	r26, 0x5B	; 91
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e5       	ldi	r30, 0x5B	; 91
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 64       	ori	r24, 0x40	; 64
    1462:	8c 93       	st	X, r24
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <EXTI_voidEnable+0x62>
		break;
	case EXTI_INT1:
		SET_BIT(EXTI_GICR_REG,EXTI_INT1_BIT);
    1466:	ab e5       	ldi	r26, 0x5B	; 91
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	eb e5       	ldi	r30, 0x5B	; 91
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	80 68       	ori	r24, 0x80	; 128
    1472:	8c 93       	st	X, r24
    1474:	07 c0       	rjmp	.+14     	; 0x1484 <EXTI_voidEnable+0x62>
		break;

	case EXTI_INT2:
		SET_BIT(EXTI_GICR_REG,EXTI_INT2_BIT);
    1476:	ab e5       	ldi	r26, 0x5B	; 91
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	eb e5       	ldi	r30, 0x5B	; 91
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 62       	ori	r24, 0x20	; 32
    1482:	8c 93       	st	X, r24
		break;

	}
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <EXTI_voidDisable>:
void EXTI_voidDisable	(u8 Copy_u8IntId){
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <EXTI_voidDisable+0x6>
    1496:	0f 92       	push	r0
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntId){
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3b 83       	std	Y+3, r19	; 0x03
    14a6:	2a 83       	std	Y+2, r18	; 0x02
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	89 f0       	breq	.+34     	; 0x14d4 <EXTI_voidDisable+0x44>
    14b2:	2a 81       	ldd	r18, Y+2	; 0x02
    14b4:	3b 81       	ldd	r19, Y+3	; 0x03
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	a1 f0       	breq	.+40     	; 0x14e4 <EXTI_voidDisable+0x54>
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	b9 f4       	brne	.+46     	; 0x14f2 <EXTI_voidDisable+0x62>

	case EXTI_INT0:

		CLR_BIT(EXTI_GICR_REG,EXTI_INT0_BIT);
    14c4:	ab e5       	ldi	r26, 0x5B	; 91
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e5       	ldi	r30, 0x5B	; 91
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 7b       	andi	r24, 0xBF	; 191
    14d0:	8c 93       	st	X, r24
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <EXTI_voidDisable+0x62>
		break;
	case EXTI_INT1:
		CLR_BIT(EXTI_GICR_REG,EXTI_INT1_BIT);
    14d4:	ab e5       	ldi	r26, 0x5B	; 91
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	eb e5       	ldi	r30, 0x5B	; 91
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8f 77       	andi	r24, 0x7F	; 127
    14e0:	8c 93       	st	X, r24
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <EXTI_voidDisable+0x62>
		break;

	case EXTI_INT2:
		CLR_BIT(EXTI_GICR_REG,EXTI_INT2_BIT);
    14e4:	ab e5       	ldi	r26, 0x5B	; 91
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e5       	ldi	r30, 0x5B	; 91
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7d       	andi	r24, 0xDF	; 223
    14f0:	8c 93       	st	X, r24
		break;

	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack	(u8 Copy_u8IntId , void (*Pf) (void)	){
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <EXTI_voidSetCallBack+0x6>
    1504:	0f 92       	push	r0
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	7b 83       	std	Y+3, r23	; 0x03
    150e:	6a 83       	std	Y+2, r22	; 0x02
	/*Options of Copy_u8IntId
	 * EXTI_INT0 = 0
	 * EXTI_INT1 = 1
	 * EXTI_INT2 = 2
	 * */
	Glo_ApfNotification[Copy_u8IntId] = Pf;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	fc 01       	movw	r30, r24
    151c:	e2 57       	subi	r30, 0x72	; 114
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	9b 81       	ldd	r25, Y+3	; 0x03
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <__vector_2>:
//
//}
/* ISR for INT1 */
void __vector_2	(void)	__attribute__((signal));
void __vector_2	(void)
{
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	if (Glo_ApfNotification[1] != NULL_PTR)
    155e:	80 91 90 00 	lds	r24, 0x0090
    1562:	90 91 91 00 	lds	r25, 0x0091
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	29 f0       	breq	.+10     	; 0x1574 <__vector_2+0x40>
	{
		Glo_ApfNotification[1]();
    156a:	e0 91 90 00 	lds	r30, 0x0090
    156e:	f0 91 91 00 	lds	r31, 0x0091
    1572:	09 95       	icall
	}


}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <__vector_3>:
/* ISR for INT2 */
void __vector_3	(void)	__attribute__((signal));
void __vector_3	(void)
{
    159a:	1f 92       	push	r1
    159c:	0f 92       	push	r0
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
	if (Glo_ApfNotification[2] != NULL_PTR)
    15c4:	80 91 92 00 	lds	r24, 0x0092
    15c8:	90 91 93 00 	lds	r25, 0x0093
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	29 f0       	breq	.+10     	; 0x15da <__vector_3+0x40>
	{
		Glo_ApfNotification[2]();
    15d0:	e0 91 92 00 	lds	r30, 0x0092
    15d4:	f0 91 93 00 	lds	r31, 0x0093
    15d8:	09 95       	icall
	}

}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <DIO_voidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"


void DIO_voidSetPinDirection    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Direction ){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	29 97       	sbiw	r28, 0x09	; 9
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6a 83       	std	Y+2, r22	; 0x02
    1618:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Direction){
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	39 87       	std	Y+9, r19	; 0x09
    1622:	28 87       	std	Y+8, r18	; 0x08
    1624:	88 85       	ldd	r24, Y+8	; 0x08
    1626:	99 85       	ldd	r25, Y+9	; 0x09
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	39 f0       	breq	.+14     	; 0x163a <DIO_voidSetPinDirection+0x3a>
    162c:	28 85       	ldd	r18, Y+8	; 0x08
    162e:	39 85       	ldd	r19, Y+9	; 0x09
    1630:	21 30       	cpi	r18, 0x01	; 1
    1632:	31 05       	cpc	r19, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <DIO_voidSetPinDirection+0x38>
    1636:	75 c0       	rjmp	.+234    	; 0x1722 <DIO_voidSetPinDirection+0x122>
    1638:	e2 c0       	rjmp	.+452    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>
	case DIO_INPUT:

		switch(Copy_u8PortId){
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3f 83       	std	Y+7, r19	; 0x07
    1642:	2e 83       	std	Y+6, r18	; 0x06
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	59 f1       	breq	.+86     	; 0x16a4 <DIO_voidSetPinDirection+0xa4>
    164e:	2e 81       	ldd	r18, Y+6	; 0x06
    1650:	3f 81       	ldd	r19, Y+7	; 0x07
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	2c f4       	brge	.+10     	; 0x1662 <DIO_voidSetPinDirection+0x62>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	69 f0       	breq	.+26     	; 0x167a <DIO_voidSetPinDirection+0x7a>
    1660:	ce c0       	rjmp	.+412    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	89 f1       	breq	.+98     	; 0x16ce <DIO_voidSetPinDirection+0xce>
    166c:	8e 81       	ldd	r24, Y+6	; 0x06
    166e:	9f 81       	ldd	r25, Y+7	; 0x07
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <DIO_voidSetPinDirection+0x78>
    1676:	40 c0       	rjmp	.+128    	; 0x16f8 <DIO_voidSetPinDirection+0xf8>
    1678:	c2 c0       	rjmp	.+388    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>

		case DIO_PORTA:
			CLR_BIT(DDRA_REG, Copy_u8PinId);
    167a:	aa e3       	ldi	r26, 0x3A	; 58
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ea e3       	ldi	r30, 0x3A	; 58
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_voidSetPinDirection+0x98>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_voidSetPinDirection+0x94>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	ad c0       	rjmp	.+346    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>
			break;

		case DIO_PORTB:
			CLR_BIT(DDRB_REG, Copy_u8PinId);
    16a4:	a7 e3       	ldi	r26, 0x37	; 55
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e7 e3       	ldi	r30, 0x37	; 55
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_voidSetPinDirection+0xc2>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_voidSetPinDirection+0xbe>
    16c6:	80 95       	com	r24
    16c8:	84 23       	and	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	98 c0       	rjmp	.+304    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>

			break;

		case DIO_PORTC:
			CLR_BIT(DDRC_REG, Copy_u8PinId);
    16ce:	a4 e3       	ldi	r26, 0x34	; 52
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e4 e3       	ldi	r30, 0x34	; 52
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_voidSetPinDirection+0xec>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_voidSetPinDirection+0xe8>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	83 c0       	rjmp	.+262    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>
			break;

		case DIO_PORTD:
			CLR_BIT(DDRD_REG, Copy_u8PinId);
    16f8:	a1 e3       	ldi	r26, 0x31	; 49
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e1 e3       	ldi	r30, 0x31	; 49
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_voidSetPinDirection+0x116>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_voidSetPinDirection+0x112>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	6e c0       	rjmp	.+220    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>

		break;

		case DIO_OUTPUT:

			switch(Copy_u8PortId){
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3d 83       	std	Y+5, r19	; 0x05
    172a:	2c 83       	std	Y+4, r18	; 0x04
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
    172e:	9d 81       	ldd	r25, Y+5	; 0x05
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	49 f1       	breq	.+82     	; 0x1788 <DIO_voidSetPinDirection+0x188>
    1736:	2c 81       	ldd	r18, Y+4	; 0x04
    1738:	3d 81       	ldd	r19, Y+5	; 0x05
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <DIO_voidSetPinDirection+0x14a>
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	61 f0       	breq	.+24     	; 0x1760 <DIO_voidSetPinDirection+0x160>
    1748:	5a c0       	rjmp	.+180    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>
    174a:	2c 81       	ldd	r18, Y+4	; 0x04
    174c:	3d 81       	ldd	r19, Y+5	; 0x05
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	71 f1       	breq	.+92     	; 0x17b0 <DIO_voidSetPinDirection+0x1b0>
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	e9 f1       	breq	.+122    	; 0x17d8 <DIO_voidSetPinDirection+0x1d8>
    175e:	4f c0       	rjmp	.+158    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>

			case DIO_PORTA:
				SET_BIT(DDRA_REG, Copy_u8PinId);
    1760:	aa e3       	ldi	r26, 0x3A	; 58
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ea e3       	ldi	r30, 0x3A	; 58
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_voidSetPinDirection+0x17e>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_voidSetPinDirection+0x17a>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	3b c0       	rjmp	.+118    	; 0x17fe <DIO_voidSetPinDirection+0x1fe>
				break;

			case DIO_PORTB:
				SET_BIT(DDRB_REG, Copy_u8PinId);
    1788:	a7 e3       	ldi	r26, 0x37	; 55
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e7 e3       	ldi	r30, 0x37	; 55
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_voidSetPinDirection+0x1a6>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_voidSetPinDirection+0x1a2>
    17aa:	84 2b       	or	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	27 c0       	rjmp	.+78     	; 0x17fe <DIO_voidSetPinDirection+0x1fe>

				break;

			case DIO_PORTC:
				SET_BIT(DDRC_REG, Copy_u8PinId);
    17b0:	a4 e3       	ldi	r26, 0x34	; 52
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e4 e3       	ldi	r30, 0x34	; 52
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_voidSetPinDirection+0x1ce>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_voidSetPinDirection+0x1ca>
    17d2:	84 2b       	or	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	13 c0       	rjmp	.+38     	; 0x17fe <DIO_voidSetPinDirection+0x1fe>
				break;

			case DIO_PORTD:
				SET_BIT(DDRD_REG, Copy_u8PinId);
    17d8:	a1 e3       	ldi	r26, 0x31	; 49
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e1 e3       	ldi	r30, 0x31	; 49
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 2e       	mov	r0, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_voidSetPinDirection+0x1f6>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_voidSetPinDirection+0x1f2>
    17fa:	84 2b       	or	r24, r20
    17fc:	8c 93       	st	X, r24


	}


}
    17fe:	29 96       	adiw	r28, 0x09	; 9
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Value ){
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	29 97       	sbiw	r28, 0x09	; 9
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	6a 83       	std	Y+2, r22	; 0x02
    1828:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Value){
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	39 87       	std	Y+9, r19	; 0x09
    1832:	28 87       	std	Y+8, r18	; 0x08
    1834:	88 85       	ldd	r24, Y+8	; 0x08
    1836:	99 85       	ldd	r25, Y+9	; 0x09
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	39 f0       	breq	.+14     	; 0x184a <DIO_voidSetPinValue+0x3a>
    183c:	28 85       	ldd	r18, Y+8	; 0x08
    183e:	39 85       	ldd	r19, Y+9	; 0x09
    1840:	21 30       	cpi	r18, 0x01	; 1
    1842:	31 05       	cpc	r19, r1
    1844:	09 f4       	brne	.+2      	; 0x1848 <DIO_voidSetPinValue+0x38>
    1846:	75 c0       	rjmp	.+234    	; 0x1932 <DIO_voidSetPinValue+0x122>
    1848:	e2 c0       	rjmp	.+452    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>
	case DIO_LOW:

		switch(Copy_u8PortId){
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3f 83       	std	Y+7, r19	; 0x07
    1852:	2e 83       	std	Y+6, r18	; 0x06
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	59 f1       	breq	.+86     	; 0x18b4 <DIO_voidSetPinValue+0xa4>
    185e:	2e 81       	ldd	r18, Y+6	; 0x06
    1860:	3f 81       	ldd	r19, Y+7	; 0x07
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	2c f4       	brge	.+10     	; 0x1872 <DIO_voidSetPinValue+0x62>
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	9f 81       	ldd	r25, Y+7	; 0x07
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	69 f0       	breq	.+26     	; 0x188a <DIO_voidSetPinValue+0x7a>
    1870:	ce c0       	rjmp	.+412    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>
    1872:	2e 81       	ldd	r18, Y+6	; 0x06
    1874:	3f 81       	ldd	r19, Y+7	; 0x07
    1876:	22 30       	cpi	r18, 0x02	; 2
    1878:	31 05       	cpc	r19, r1
    187a:	89 f1       	breq	.+98     	; 0x18de <DIO_voidSetPinValue+0xce>
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <DIO_voidSetPinValue+0x78>
    1886:	40 c0       	rjmp	.+128    	; 0x1908 <DIO_voidSetPinValue+0xf8>
    1888:	c2 c0       	rjmp	.+388    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>

		case DIO_PORTA:
			CLR_BIT(PORTA_REG, Copy_u8PinId);
    188a:	ab e3       	ldi	r26, 0x3B	; 59
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	eb e3       	ldi	r30, 0x3B	; 59
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_voidSetPinValue+0x98>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_voidSetPinValue+0x94>
    18ac:	80 95       	com	r24
    18ae:	84 23       	and	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	ad c0       	rjmp	.+346    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>
			break;

		case DIO_PORTB:
			CLR_BIT(PORTB_REG, Copy_u8PinId);
    18b4:	a8 e3       	ldi	r26, 0x38	; 56
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_voidSetPinValue+0xc2>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_voidSetPinValue+0xbe>
    18d6:	80 95       	com	r24
    18d8:	84 23       	and	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	98 c0       	rjmp	.+304    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>

			break;

		case DIO_PORTC:
			CLR_BIT(PORTC_REG, Copy_u8PinId);
    18de:	a5 e3       	ldi	r26, 0x35	; 53
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e5 e3       	ldi	r30, 0x35	; 53
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_voidSetPinValue+0xec>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_voidSetPinValue+0xe8>
    1900:	80 95       	com	r24
    1902:	84 23       	and	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	83 c0       	rjmp	.+262    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>
			break;

		case DIO_PORTD:
			CLR_BIT(PORTD_REG, Copy_u8PinId);
    1908:	a2 e3       	ldi	r26, 0x32	; 50
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e2 e3       	ldi	r30, 0x32	; 50
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_voidSetPinValue+0x116>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <DIO_voidSetPinValue+0x112>
    192a:	80 95       	com	r24
    192c:	84 23       	and	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	6e c0       	rjmp	.+220    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>

		break;

		case DIO_HIGH:

			switch(Copy_u8PortId){
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3d 83       	std	Y+5, r19	; 0x05
    193a:	2c 83       	std	Y+4, r18	; 0x04
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	49 f1       	breq	.+82     	; 0x1998 <DIO_voidSetPinValue+0x188>
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	2c f4       	brge	.+10     	; 0x195a <DIO_voidSetPinValue+0x14a>
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 f0       	breq	.+24     	; 0x1970 <DIO_voidSetPinValue+0x160>
    1958:	5a c0       	rjmp	.+180    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>
    195a:	2c 81       	ldd	r18, Y+4	; 0x04
    195c:	3d 81       	ldd	r19, Y+5	; 0x05
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	71 f1       	breq	.+92     	; 0x19c0 <DIO_voidSetPinValue+0x1b0>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	91 05       	cpc	r25, r1
    196c:	e9 f1       	breq	.+122    	; 0x19e8 <DIO_voidSetPinValue+0x1d8>
    196e:	4f c0       	rjmp	.+158    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>

			case DIO_PORTA:
				SET_BIT(PORTA_REG, Copy_u8PinId);
    1970:	ab e3       	ldi	r26, 0x3B	; 59
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	eb e3       	ldi	r30, 0x3B	; 59
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_voidSetPinValue+0x17e>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_voidSetPinValue+0x17a>
    1992:	84 2b       	or	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	3b c0       	rjmp	.+118    	; 0x1a0e <DIO_voidSetPinValue+0x1fe>
				break;

			case DIO_PORTB:
				SET_BIT(PORTB_REG, Copy_u8PinId);
    1998:	a8 e3       	ldi	r26, 0x38	; 56
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e8 e3       	ldi	r30, 0x38	; 56
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_voidSetPinValue+0x1a6>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_voidSetPinValue+0x1a2>
    19ba:	84 2b       	or	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	27 c0       	rjmp	.+78     	; 0x1a0e <DIO_voidSetPinValue+0x1fe>

				break;

			case DIO_PORTC:
				SET_BIT(PORTC_REG, Copy_u8PinId);
    19c0:	a5 e3       	ldi	r26, 0x35	; 53
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_voidSetPinValue+0x1ce>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_voidSetPinValue+0x1ca>
    19e2:	84 2b       	or	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <DIO_voidSetPinValue+0x1fe>
				break;

			case DIO_PORTD:
				SET_BIT(PORTD_REG, Copy_u8PinId);
    19e8:	a2 e3       	ldi	r26, 0x32	; 50
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e2 e3       	ldi	r30, 0x32	; 50
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_voidSetPinValue+0x1f6>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_voidSetPinValue+0x1f2>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24


	}


}
    1a0e:	29 96       	adiw	r28, 0x09	; 9
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue        (u8 Copy_u8PortId , u8 Copy_u8PinId ){
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <DIO_u8GetPinValue+0x6>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <DIO_u8GetPinValue+0x8>
    1a28:	0f 92       	push	r0
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	8a 83       	std	Y+2, r24	; 0x02
    1a30:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnedValue = 255 ;
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8PortId)
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3d 83       	std	Y+5, r19	; 0x05
    1a3e:	2c 83       	std	Y+4, r18	; 0x04
    1a40:	4c 81       	ldd	r20, Y+4	; 0x04
    1a42:	5d 81       	ldd	r21, Y+5	; 0x05
    1a44:	41 30       	cpi	r20, 0x01	; 1
    1a46:	51 05       	cpc	r21, r1
    1a48:	41 f1       	breq	.+80     	; 0x1a9a <DIO_u8GetPinValue+0x7a>
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	91 05       	cpc	r25, r1
    1a52:	34 f4       	brge	.+12     	; 0x1a60 <DIO_u8GetPinValue+0x40>
    1a54:	2c 81       	ldd	r18, Y+4	; 0x04
    1a56:	3d 81       	ldd	r19, Y+5	; 0x05
    1a58:	21 15       	cp	r18, r1
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <DIO_u8GetPinValue+0x56>
    1a5e:	52 c0       	rjmp	.+164    	; 0x1b04 <DIO_u8GetPinValue+0xe4>
    1a60:	4c 81       	ldd	r20, Y+4	; 0x04
    1a62:	5d 81       	ldd	r21, Y+5	; 0x05
    1a64:	42 30       	cpi	r20, 0x02	; 2
    1a66:	51 05       	cpc	r21, r1
    1a68:	51 f1       	breq	.+84     	; 0x1abe <DIO_u8GetPinValue+0x9e>
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6e:	83 30       	cpi	r24, 0x03	; 3
    1a70:	91 05       	cpc	r25, r1
    1a72:	b9 f1       	breq	.+110    	; 0x1ae2 <DIO_u8GetPinValue+0xc2>
    1a74:	47 c0       	rjmp	.+142    	; 0x1b04 <DIO_u8GetPinValue+0xe4>
	{
	case DIO_PORTA :
		Local_u8ReturnedValue = GET_BIT(PINA_REG , Copy_u8PinId);
    1a76:	e9 e3       	ldi	r30, 0x39	; 57
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a9 01       	movw	r20, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_u8GetPinValue+0x6e>
    1a8a:	55 95       	asr	r21
    1a8c:	47 95       	ror	r20
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_u8GetPinValue+0x6a>
    1a92:	ca 01       	movw	r24, r20
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	35 c0       	rjmp	.+106    	; 0x1b04 <DIO_u8GetPinValue+0xe4>
		break ;
	case DIO_PORTB :
		Local_u8ReturnedValue = GET_BIT(PINB_REG , Copy_u8PinId);
    1a9a:	e6 e3       	ldi	r30, 0x36	; 54
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <DIO_u8GetPinValue+0x92>
    1aae:	55 95       	asr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	8a 95       	dec	r24
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <DIO_u8GetPinValue+0x8e>
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	81 70       	andi	r24, 0x01	; 1
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	23 c0       	rjmp	.+70     	; 0x1b04 <DIO_u8GetPinValue+0xe4>
		break ;
	case DIO_PORTC :
		Local_u8ReturnedValue = GET_BIT(PINC_REG , Copy_u8PinId);
    1abe:	e3 e3       	ldi	r30, 0x33	; 51
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a9 01       	movw	r20, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_u8GetPinValue+0xb6>
    1ad2:	55 95       	asr	r21
    1ad4:	47 95       	ror	r20
    1ad6:	8a 95       	dec	r24
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_u8GetPinValue+0xb2>
    1ada:	ca 01       	movw	r24, r20
    1adc:	81 70       	andi	r24, 0x01	; 1
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	11 c0       	rjmp	.+34     	; 0x1b04 <DIO_u8GetPinValue+0xe4>
		break ;
	case DIO_PORTD :
		Local_u8ReturnedValue = GET_BIT(PIND_REG , Copy_u8PinId);
    1ae2:	e0 e3       	ldi	r30, 0x30	; 48
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a9 01       	movw	r20, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_u8GetPinValue+0xda>
    1af6:	55 95       	asr	r21
    1af8:	47 95       	ror	r20
    1afa:	8a 95       	dec	r24
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_u8GetPinValue+0xd6>
    1afe:	ca 01       	movw	r24, r20
    1b00:	81 70       	andi	r24, 0x01	; 1
    1b02:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}



	return Local_u8ReturnedValue ;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection    (u8 Copy_u8PortId , u8 Copy_u8Direction ){
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	28 97       	sbiw	r28, 0x08	; 8
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Direction){
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	38 87       	std	Y+8, r19	; 0x08
    1b36:	2f 83       	std	Y+7, r18	; 0x07
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 85       	ldd	r25, Y+8	; 0x08
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	31 f0       	breq	.+12     	; 0x1b4c <DIO_voidSetPortDirection+0x36>
    1b40:	2f 81       	ldd	r18, Y+7	; 0x07
    1b42:	38 85       	ldd	r19, Y+8	; 0x08
    1b44:	21 30       	cpi	r18, 0x01	; 1
    1b46:	31 05       	cpc	r19, r1
    1b48:	81 f1       	breq	.+96     	; 0x1baa <DIO_voidSetPortDirection+0x94>
    1b4a:	61 c0       	rjmp	.+194    	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
	case DIO_INPUT:
		switch(Copy_u8PortId){
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	3e 83       	std	Y+6, r19	; 0x06
    1b54:	2d 83       	std	Y+5, r18	; 0x05
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	c9 f0       	breq	.+50     	; 0x1b92 <DIO_voidSetPortDirection+0x7c>
    1b60:	2d 81       	ldd	r18, Y+5	; 0x05
    1b62:	3e 81       	ldd	r19, Y+6	; 0x06
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <DIO_voidSetPortDirection+0x5e>
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	61 f0       	breq	.+24     	; 0x1b8a <DIO_voidSetPortDirection+0x74>
    1b72:	4d c0       	rjmp	.+154    	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
    1b74:	2d 81       	ldd	r18, Y+5	; 0x05
    1b76:	3e 81       	ldd	r19, Y+6	; 0x06
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	71 f0       	breq	.+28     	; 0x1b9a <DIO_voidSetPortDirection+0x84>
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	91 05       	cpc	r25, r1
    1b86:	69 f0       	breq	.+26     	; 0x1ba2 <DIO_voidSetPortDirection+0x8c>
    1b88:	42 c0       	rjmp	.+132    	; 0x1c0e <DIO_voidSetPortDirection+0xf8>

		case DIO_PORTA :
			DDRA_REG = 0x00;
    1b8a:	ea e3       	ldi	r30, 0x3A	; 58
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	10 82       	st	Z, r1
    1b90:	3e c0       	rjmp	.+124    	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
			break ;
		case DIO_PORTB :
			DDRB_REG = 0x00;
    1b92:	e7 e3       	ldi	r30, 0x37	; 55
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	10 82       	st	Z, r1
    1b98:	3a c0       	rjmp	.+116    	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
			break ;
		case DIO_PORTC :
			DDRC_REG = 0x00;
    1b9a:	e4 e3       	ldi	r30, 0x34	; 52
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	10 82       	st	Z, r1
    1ba0:	36 c0       	rjmp	.+108    	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
			break ;
		case DIO_PORTD :
			DDRD_REG = 0x00;
    1ba2:	e1 e3       	ldi	r30, 0x31	; 49
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	10 82       	st	Z, r1
    1ba8:	32 c0       	rjmp	.+100    	; 0x1c0e <DIO_voidSetPortDirection+0xf8>

		break;


		case DIO_OUTPUT:
			switch(Copy_u8PortId){
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3c 83       	std	Y+4, r19	; 0x04
    1bb2:	2b 83       	std	Y+3, r18	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	d1 f0       	breq	.+52     	; 0x1bf2 <DIO_voidSetPortDirection+0xdc>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <DIO_voidSetPortDirection+0xbc>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <DIO_voidSetPortDirection+0xd2>
    1bd0:	1e c0       	rjmp	.+60     	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	81 f0       	breq	.+32     	; 0x1bfc <DIO_voidSetPortDirection+0xe6>
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	91 05       	cpc	r25, r1
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <DIO_voidSetPortDirection+0xf0>
    1be6:	13 c0       	rjmp	.+38     	; 0x1c0e <DIO_voidSetPortDirection+0xf8>

			case DIO_PORTA :
				DDRA_REG = 0xff;
    1be8:	ea e3       	ldi	r30, 0x3A	; 58
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	80 83       	st	Z, r24
    1bf0:	0e c0       	rjmp	.+28     	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
				break ;
			case DIO_PORTB :
				DDRB_REG = 0xff;
    1bf2:	e7 e3       	ldi	r30, 0x37	; 55
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	80 83       	st	Z, r24
    1bfa:	09 c0       	rjmp	.+18     	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
				break ;
			case DIO_PORTC :
				DDRC_REG = 0xff;
    1bfc:	e4 e3       	ldi	r30, 0x34	; 52
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	80 83       	st	Z, r24
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <DIO_voidSetPortDirection+0xf8>
				break ;
			case DIO_PORTD :
				DDRD_REG = 0xff;
    1c06:	e1 e3       	ldi	r30, 0x31	; 49
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8f ef       	ldi	r24, 0xFF	; 255
    1c0c:	80 83       	st	Z, r24
			break;

			default:
				break;
	}
}
    1c0e:	28 96       	adiw	r28, 0x08	; 8
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue    (u8 Copy_u8PortId , u8 Copy_u8Value ){
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <DIO_voidSetPortValue+0x6>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <DIO_voidSetPortValue+0x8>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId){
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3c 83       	std	Y+4, r19	; 0x04
    1c38:	2b 83       	std	Y+3, r18	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	d1 f0       	breq	.+52     	; 0x1c78 <DIO_voidSetPortValue+0x58>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	3c 81       	ldd	r19, Y+4	; 0x04
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <DIO_voidSetPortValue+0x38>
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <DIO_voidSetPortValue+0x4e>
    1c56:	1e c0       	rjmp	.+60     	; 0x1c94 <DIO_voidSetPortValue+0x74>
    1c58:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <DIO_voidSetPortValue+0x62>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	91 05       	cpc	r25, r1
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <DIO_voidSetPortValue+0x6c>
    1c6c:	13 c0       	rjmp	.+38     	; 0x1c94 <DIO_voidSetPortValue+0x74>

	case DIO_PORTA :
		PORTA_REG = Copy_u8Value;
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	80 83       	st	Z, r24
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <DIO_voidSetPortValue+0x74>
		break ;
	case DIO_PORTB :
		PORTB_REG = Copy_u8Value;
    1c78:	e8 e3       	ldi	r30, 0x38	; 56
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	80 83       	st	Z, r24
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <DIO_voidSetPortValue+0x74>
		break ;
	case DIO_PORTC :
		PORTC_REG = Copy_u8Value;
    1c82:	e5 e3       	ldi	r30, 0x35	; 53
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	80 83       	st	Z, r24
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <DIO_voidSetPortValue+0x74>
		break ;
	case DIO_PORTD :
		PORTD_REG = Copy_u8Value;
    1c8c:	e2 e3       	ldi	r30, 0x32	; 50
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	80 83       	st	Z, r24
		break ;

	default:
		break ;
	}
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue        (u8 Copy_u8PortId ){
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <DIO_u8GetPortValue+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <DIO_u8GetPortValue+0x8>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8RetValue = 255;
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8PortId){
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	3c 83       	std	Y+4, r19	; 0x04
    1cbc:	2b 83       	std	Y+3, r18	; 0x03
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	d1 f0       	breq	.+52     	; 0x1cfc <DIO_u8GetPortValue+0x5a>
    1cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <DIO_u8GetPortValue+0x3a>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	61 f0       	breq	.+24     	; 0x1cf2 <DIO_u8GetPortValue+0x50>
    1cda:	1e c0       	rjmp	.+60     	; 0x1d18 <DIO_u8GetPortValue+0x76>
    1cdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cde:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	81 f0       	breq	.+32     	; 0x1d06 <DIO_u8GetPortValue+0x64>
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	83 30       	cpi	r24, 0x03	; 3
    1cec:	91 05       	cpc	r25, r1
    1cee:	81 f0       	breq	.+32     	; 0x1d10 <DIO_u8GetPortValue+0x6e>
    1cf0:	13 c0       	rjmp	.+38     	; 0x1d18 <DIO_u8GetPortValue+0x76>

	case DIO_PORTA :
		Local_u8RetValue = PINA_REG;
    1cf2:	e9 e3       	ldi	r30, 0x39	; 57
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	0e c0       	rjmp	.+28     	; 0x1d18 <DIO_u8GetPortValue+0x76>
		break ;
	case DIO_PORTB :
		Local_u8RetValue = PINB_REG;
    1cfc:	e6 e3       	ldi	r30, 0x36	; 54
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	09 c0       	rjmp	.+18     	; 0x1d18 <DIO_u8GetPortValue+0x76>
		break ;
	case DIO_PORTC :
		Local_u8RetValue = PINC_REG;
    1d06:	e3 e3       	ldi	r30, 0x33	; 51
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <DIO_u8GetPortValue+0x76>
		break ;
	case DIO_PORTD :
		Local_u8RetValue = PIND_REG;
    1d10:	e0 e3       	ldi	r30, 0x30	; 48
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	89 83       	std	Y+1, r24	; 0x01
		break ;

	default:
		break ;
	}
	return Local_u8RetValue;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <ADC_voidInit>:


void (*Glo_voidPtrTofn)(void) = NULL_PTR;

void ADC_voidInit(ADC_Conf_t * ADC_ptr)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <ADC_voidInit+0x6>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01

	/*Clear the ref voltage to assign the new*/
	ADC_ADMUX_REG &= 0x3F;
    1d36:	a7 e2       	ldi	r26, 0x27	; 39
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e7 e2       	ldi	r30, 0x27	; 39
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 73       	andi	r24, 0x3F	; 63
    1d42:	8c 93       	st	X, r24


	/* Assigning the ref voltage*/
	ADC_ADMUX_REG |= ((ADC_ptr->ADC_vref) << 6);
    1d44:	a7 e2       	ldi	r26, 0x27	; 39
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e7 e2       	ldi	r30, 0x27	; 39
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	28 2f       	mov	r18, r24
    1d50:	e9 81       	ldd	r30, Y+1	; 0x01
    1d52:	fa 81       	ldd	r31, Y+2	; 0x02
    1d54:	80 81       	ld	r24, Z
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	00 24       	eor	r0, r0
    1d5c:	96 95       	lsr	r25
    1d5e:	87 95       	ror	r24
    1d60:	07 94       	ror	r0
    1d62:	96 95       	lsr	r25
    1d64:	87 95       	ror	r24
    1d66:	07 94       	ror	r0
    1d68:	98 2f       	mov	r25, r24
    1d6a:	80 2d       	mov	r24, r0
    1d6c:	82 2b       	or	r24, r18
    1d6e:	8c 93       	st	X, r24

	/*CLEAR LEAST SIG 3 BITS*/
	ADC_ADCSRA_REG &= 0xF8;
    1d70:	a6 e2       	ldi	r26, 0x26	; 38
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e6 e2       	ldi	r30, 0x26	; 38
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	88 7f       	andi	r24, 0xF8	; 248
    1d7c:	8c 93       	st	X, r24

	/*INSERT THE REQUIRED PRESCALER*/
	ADC_ADCSRA_REG |= (ADC_ptr->ADC_prescaler);
    1d7e:	a6 e2       	ldi	r26, 0x26	; 38
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e6 e2       	ldi	r30, 0x26	; 38
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	90 81       	ld	r25, Z
    1d88:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8c:	81 81       	ldd	r24, Z+1	; 0x01
    1d8e:	89 2b       	or	r24, r25
    1d90:	8c 93       	st	X, r24

	/*ENABLING ADC*/
	SET_BIT(ADC_ADCSRA_REG, ADC_ADEN_BIT);
    1d92:	a6 e2       	ldi	r26, 0x26	; 38
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e2       	ldi	r30, 0x26	; 38
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 68       	ori	r24, 0x80	; 128
    1d9e:	8c 93       	st	X, r24

#if ADC_INTERRUPT_STATUS == ADC_INTERRUPT_DISABLE
	/*DISABLE INTERRUPT OF ADC*/
	CLR_BIT(ADC_ADCSRA_REG,ADC_ADIE_BIT);
    1da0:	a6 e2       	ldi	r26, 0x26	; 38
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 e2       	ldi	r30, 0x26	; 38
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	87 7f       	andi	r24, 0xF7	; 247
    1dac:	8c 93       	st	X, r24
#elif ADC_INTERRUPT_STATUS == ADC_INTERRUPT_ENABLE
	SET_BIT(ADC_ADCSRA_REG,ADC_ADIE_BIT);
#endif
}
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <ADC_u16SynchReadChannel>:



u16 ADC_u16SynchReadChannel(ADC_InputChWithGain_t ADC_InputChWithGain)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <ADC_u16SynchReadChannel+0x6>
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16RetVal = 0;
    1dc6:	1a 82       	std	Y+2, r1	; 0x02
    1dc8:	19 82       	std	Y+1, r1	; 0x01

	/*CLEARING LEAST SIG 5 BITS*/
	ADC_ADMUX_REG &= 0xE0;
    1dca:	a7 e2       	ldi	r26, 0x27	; 39
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e7 e2       	ldi	r30, 0x27	; 39
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 7e       	andi	r24, 0xE0	; 224
    1dd6:	8c 93       	st	X, r24

	/*INSERT THE REQUIRED CHANNEL*/
	ADC_ADMUX_REG |= (ADC_InputChWithGain);
    1dd8:	a7 e2       	ldi	r26, 0x27	; 39
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e7 e2       	ldi	r30, 0x27	; 39
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	90 81       	ld	r25, Z
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	89 2b       	or	r24, r25
    1de6:	8c 93       	st	X, r24

	/*START CONVERSION*/
	SET_BIT(ADC_ADCSRA_REG , ADC_ADSC_BIT);
    1de8:	a6 e2       	ldi	r26, 0x26	; 38
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e6 e2       	ldi	r30, 0x26	; 38
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	80 64       	ori	r24, 0x40	; 64
    1df4:	8c 93       	st	X, r24

	/*WAIT UNTIL FLAG IS HIGH*/
	while(GET_BIT(ADC_ADCSRA_REG, ADC_ADIF_BIT) == 0);
    1df6:	e6 e2       	ldi	r30, 0x26	; 38
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	82 95       	swap	r24
    1dfe:	8f 70       	andi	r24, 0x0F	; 15
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	81 70       	andi	r24, 0x01	; 1
    1e06:	90 70       	andi	r25, 0x00	; 0
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	a9 f3       	breq	.-22     	; 0x1df6 <ADC_u16SynchReadChannel+0x3e>

	/*CLEAR THE FLAG*/
	SET_BIT(ADC_ADCSRA_REG, ADC_ADIF_BIT);
    1e0c:	a6 e2       	ldi	r26, 0x26	; 38
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e6 e2       	ldi	r30, 0x26	; 38
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	80 61       	ori	r24, 0x10	; 16
    1e18:	8c 93       	st	X, r24



	/*GET THE DIGITAL READING*/
	Local_u16RetVal = ADC_ADCL_REG ;
    1e1a:	e4 e2       	ldi	r30, 0x24	; 36
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
	Local_u16RetVal |= (((u16)ADC_ADCH_REG << 8) );
    1e28:	e5 e2       	ldi	r30, 0x25	; 37
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	38 2f       	mov	r19, r24
    1e34:	22 27       	eor	r18, r18
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	82 2b       	or	r24, r18
    1e3c:	93 2b       	or	r25, r19
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01

	return Local_u16RetVal;
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <ADC_voidInterruptEnable>:


void ADC_voidInterruptEnable(void){
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_ADCSRA_REG, ADC_ADIE_BIT);
    1e5a:	a6 e2       	ldi	r26, 0x26	; 38
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e6 e2       	ldi	r30, 0x26	; 38
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	88 60       	ori	r24, 0x08	; 8
    1e66:	8c 93       	st	X, r24
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <ADC_voidInterruptDisable>:
void ADC_voidInterruptDisable(void){
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADC_ADCSRA_REG, ADC_ADIE_BIT);
    1e76:	a6 e2       	ldi	r26, 0x26	; 38
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e6 e2       	ldi	r30, 0x26	; 38
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	87 7f       	andi	r24, 0xF7	; 247
    1e82:	8c 93       	st	X, r24
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <ADC_voidChooseTrigSrc>:


void ADC_voidChooseTrigSrc(ADC_trigger_source_t Copy_enumTriggerSource){
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	89 83       	std	Y+1, r24	; 0x01

	/*Clearing 7,6,5 bits in SIFOR REG*/
	ADC_SFIOR_REG &= 0b00001111;
    1e96:	a0 e5       	ldi	r26, 0x50	; 80
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e0 e5       	ldi	r30, 0x50	; 80
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8f 70       	andi	r24, 0x0F	; 15
    1ea2:	8c 93       	st	X, r24

	/*Assigning the value of trigger Source*/
	ADC_SFIOR_REG |= (Copy_enumTriggerSource<< 5);
    1ea4:	a0 e5       	ldi	r26, 0x50	; 80
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e0 e5       	ldi	r30, 0x50	; 80
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	28 2f       	mov	r18, r24
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	82 95       	swap	r24
    1ebc:	92 95       	swap	r25
    1ebe:	90 7f       	andi	r25, 0xF0	; 240
    1ec0:	98 27       	eor	r25, r24
    1ec2:	80 7f       	andi	r24, 0xF0	; 240
    1ec4:	98 27       	eor	r25, r24
    1ec6:	82 2b       	or	r24, r18
    1ec8:	8c 93       	st	X, r24

	/*Enable Tigger in ADCSRA REG*/
	SET_BIT(ADC_ADCSRA_REG, ADC_ADATE_BIT);
    1eca:	a6 e2       	ldi	r26, 0x26	; 38
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e6 e2       	ldi	r30, 0x26	; 38
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 62       	ori	r24, 0x20	; 32
    1ed6:	8c 93       	st	X, r24


	/*ENABLING ADC*/
	SET_BIT(ADC_ADCSRA_REG, ADC_ADEN_BIT);
    1ed8:	a6 e2       	ldi	r26, 0x26	; 38
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e6 e2       	ldi	r30, 0x26	; 38
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 68       	ori	r24, 0x80	; 128
    1ee4:	8c 93       	st	X, r24

	/*START CONVERSION*/
	SET_BIT(ADC_ADCSRA_REG , ADC_ADSC_BIT);
    1ee6:	a6 e2       	ldi	r26, 0x26	; 38
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e6 e2       	ldi	r30, 0x26	; 38
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 64       	ori	r24, 0x40	; 64
    1ef2:	8c 93       	st	X, r24

}
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <ADC_voidAsynchChooseChannel>:


void ADC_voidAsynchChooseChannel(ADC_InputChWithGain_t ADC_InputChWithGain){
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	89 83       	std	Y+1, r24	; 0x01
	/*CLEARING LEAST SIG 5 BITS*/
	ADC_ADMUX_REG &= 0xE0;
    1f08:	a7 e2       	ldi	r26, 0x27	; 39
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e7 e2       	ldi	r30, 0x27	; 39
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	80 7e       	andi	r24, 0xE0	; 224
    1f14:	8c 93       	st	X, r24

	/*INSERT THE REQUIRED CHANNEL*/
	ADC_ADMUX_REG |= (ADC_InputChWithGain);
    1f16:	a7 e2       	ldi	r26, 0x27	; 39
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e7 e2       	ldi	r30, 0x27	; 39
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	90 81       	ld	r25, Z
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	89 2b       	or	r24, r25
    1f24:	8c 93       	st	X, r24

}
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <ADC_voidAsynchReadChannel>:

void ADC_voidAsynchReadChannel(u16 * Data){
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <ADC_voidAsynchReadChannel+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <ADC_voidAsynchReadChannel+0x8>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03

	u16 Local_u16RetVal = 0;
    1f3e:	1a 82       	std	Y+2, r1	; 0x02
    1f40:	19 82       	std	Y+1, r1	; 0x01
	/*GET THE DIGITAL READING*/
	Local_u16RetVal = ADC_ADCL_REG ;
    1f42:	e4 e2       	ldi	r30, 0x24	; 36
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	Local_u16RetVal |= (((u16)ADC_ADCH_REG << 8) );
    1f50:	e5 e2       	ldi	r30, 0x25	; 37
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	38 2f       	mov	r19, r24
    1f5c:	22 27       	eor	r18, r18
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	82 2b       	or	r24, r18
    1f64:	93 2b       	or	r25, r19
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01

	*Data = Local_u16RetVal;
    1f6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <ADC_voidSetCallBackNotification>:

void ADC_voidSetCallBackNotification(void (*Pf) (void) ){
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <ADC_voidSetCallBackNotification+0x6>
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01

		Glo_voidPtrTofn = Pf;
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	90 93 95 00 	sts	0x0095, r25
    1f9a:	80 93 94 00 	sts	0x0094, r24
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <__vector_16>:
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    1fa8:	1f 92       	push	r1
    1faa:	0f 92       	push	r0
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	0f 92       	push	r0
    1fb0:	11 24       	eor	r1, r1
    1fb2:	2f 93       	push	r18
    1fb4:	3f 93       	push	r19
    1fb6:	4f 93       	push	r20
    1fb8:	5f 93       	push	r21
    1fba:	6f 93       	push	r22
    1fbc:	7f 93       	push	r23
    1fbe:	8f 93       	push	r24
    1fc0:	9f 93       	push	r25
    1fc2:	af 93       	push	r26
    1fc4:	bf 93       	push	r27
    1fc6:	ef 93       	push	r30
    1fc8:	ff 93       	push	r31
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62

	if(Glo_voidPtrTofn != NULL_PTR){
    1fd2:	80 91 94 00 	lds	r24, 0x0094
    1fd6:	90 91 95 00 	lds	r25, 0x0095
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	29 f0       	breq	.+10     	; 0x1fe8 <__vector_16+0x40>

		Glo_voidPtrTofn();
    1fde:	e0 91 94 00 	lds	r30, 0x0094
    1fe2:	f0 91 95 00 	lds	r31, 0x0095
    1fe6:	09 95       	icall
	}

}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	ff 91       	pop	r31
    1fee:	ef 91       	pop	r30
    1ff0:	bf 91       	pop	r27
    1ff2:	af 91       	pop	r26
    1ff4:	9f 91       	pop	r25
    1ff6:	8f 91       	pop	r24
    1ff8:	7f 91       	pop	r23
    1ffa:	6f 91       	pop	r22
    1ffc:	5f 91       	pop	r21
    1ffe:	4f 91       	pop	r20
    2000:	3f 91       	pop	r19
    2002:	2f 91       	pop	r18
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	0f 90       	pop	r0
    200a:	1f 90       	pop	r1
    200c:	18 95       	reti

0000200e <STEPPERMOTOR_voidInit>:
#include "STEPPERMOTOR_config.h"
#include "STEPPERMOTOR_private.h"
#include "STEPPERMOTORCLCD_interface.h"


void STEPPERMOTOR_voidInit(void){
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_OUTPUT);
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_OUTPUT);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	61 e0       	ldi	r22, 0x01	; 1
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_OUTPUT);
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	62 e0       	ldi	r22, 0x02	; 2
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_OUTPUT);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	63 e0       	ldi	r22, 0x03	; 3
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>

}
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <STEPPERMOTOR_voidRotCW>:
void STEPPERMOTOR_voidRotCW(u16 degrees){
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	ec 97       	sbiw	r28, 0x3c	; 60
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	9c af       	std	Y+60, r25	; 0x3c
    205a:	8b af       	std	Y+59, r24	; 0x3b


	for(u16 iterations = 0 ; iterations < ((64 * degrees) /45); iterations++ ){
    205c:	1a ae       	std	Y+58, r1	; 0x3a
    205e:	19 ae       	std	Y+57, r1	; 0x39
    2060:	1d c2       	rjmp	.+1082   	; 0x249c <STEPPERMOTOR_voidRotCW+0x458>
		//step 1
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_HIGH);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_LOW);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_LOW);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_LOW );
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	63 e0       	ldi	r22, 0x03	; 3
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e2       	ldi	r26, 0x20	; 32
    2090:	b1 e4       	ldi	r27, 0x41	; 65
    2092:	8d ab       	std	Y+53, r24	; 0x35
    2094:	9e ab       	std	Y+54, r25	; 0x36
    2096:	af ab       	std	Y+55, r26	; 0x37
    2098:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209a:	6d a9       	ldd	r22, Y+53	; 0x35
    209c:	7e a9       	ldd	r23, Y+54	; 0x36
    209e:	8f a9       	ldd	r24, Y+55	; 0x37
    20a0:	98 ad       	ldd	r25, Y+56	; 0x38
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4a ef       	ldi	r20, 0xFA	; 250
    20a8:	54 e4       	ldi	r21, 0x44	; 68
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	89 ab       	std	Y+49, r24	; 0x31
    20b4:	9a ab       	std	Y+50, r25	; 0x32
    20b6:	ab ab       	std	Y+51, r26	; 0x33
    20b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20ba:	69 a9       	ldd	r22, Y+49	; 0x31
    20bc:	7a a9       	ldd	r23, Y+50	; 0x32
    20be:	8b a9       	ldd	r24, Y+51	; 0x33
    20c0:	9c a9       	ldd	r25, Y+52	; 0x34
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ce:	88 23       	and	r24, r24
    20d0:	2c f4       	brge	.+10     	; 0x20dc <STEPPERMOTOR_voidRotCW+0x98>
		__ticks = 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	98 ab       	std	Y+48, r25	; 0x30
    20d8:	8f a7       	std	Y+47, r24	; 0x2f
    20da:	3f c0       	rjmp	.+126    	; 0x215a <STEPPERMOTOR_voidRotCW+0x116>
	else if (__tmp > 65535)
    20dc:	69 a9       	ldd	r22, Y+49	; 0x31
    20de:	7a a9       	ldd	r23, Y+50	; 0x32
    20e0:	8b a9       	ldd	r24, Y+51	; 0x33
    20e2:	9c a9       	ldd	r25, Y+52	; 0x34
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	3f ef       	ldi	r19, 0xFF	; 255
    20e8:	4f e7       	ldi	r20, 0x7F	; 127
    20ea:	57 e4       	ldi	r21, 0x47	; 71
    20ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f0:	18 16       	cp	r1, r24
    20f2:	4c f5       	brge	.+82     	; 0x2146 <STEPPERMOTOR_voidRotCW+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f4:	6d a9       	ldd	r22, Y+53	; 0x35
    20f6:	7e a9       	ldd	r23, Y+54	; 0x36
    20f8:	8f a9       	ldd	r24, Y+55	; 0x37
    20fa:	98 ad       	ldd	r25, Y+56	; 0x38
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	98 ab       	std	Y+48, r25	; 0x30
    211a:	8f a7       	std	Y+47, r24	; 0x2f
    211c:	0f c0       	rjmp	.+30     	; 0x213c <STEPPERMOTOR_voidRotCW+0xf8>
    211e:	88 ec       	ldi	r24, 0xC8	; 200
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9e a7       	std	Y+46, r25	; 0x2e
    2124:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2126:	8d a5       	ldd	r24, Y+45	; 0x2d
    2128:	9e a5       	ldd	r25, Y+46	; 0x2e
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <STEPPERMOTOR_voidRotCW+0xe6>
    212e:	9e a7       	std	Y+46, r25	; 0x2e
    2130:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2132:	8f a5       	ldd	r24, Y+47	; 0x2f
    2134:	98 a9       	ldd	r25, Y+48	; 0x30
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	98 ab       	std	Y+48, r25	; 0x30
    213a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213c:	8f a5       	ldd	r24, Y+47	; 0x2f
    213e:	98 a9       	ldd	r25, Y+48	; 0x30
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	69 f7       	brne	.-38     	; 0x211e <STEPPERMOTOR_voidRotCW+0xda>
    2144:	14 c0       	rjmp	.+40     	; 0x216e <STEPPERMOTOR_voidRotCW+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2146:	69 a9       	ldd	r22, Y+49	; 0x31
    2148:	7a a9       	ldd	r23, Y+50	; 0x32
    214a:	8b a9       	ldd	r24, Y+51	; 0x33
    214c:	9c a9       	ldd	r25, Y+52	; 0x34
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	98 ab       	std	Y+48, r25	; 0x30
    2158:	8f a7       	std	Y+47, r24	; 0x2f
    215a:	8f a5       	ldd	r24, Y+47	; 0x2f
    215c:	98 a9       	ldd	r25, Y+48	; 0x30
    215e:	9c a7       	std	Y+44, r25	; 0x2c
    2160:	8b a7       	std	Y+43, r24	; 0x2b
    2162:	8b a5       	ldd	r24, Y+43	; 0x2b
    2164:	9c a5       	ldd	r25, Y+44	; 0x2c
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <STEPPERMOTOR_voidRotCW+0x122>
    216a:	9c a7       	std	Y+44, r25	; 0x2c
    216c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		
		
		//step 2
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_LOW);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_HIGH );
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_LOW);
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	62 e0       	ldi	r22, 0x02	; 2
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_LOW);
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	63 e0       	ldi	r22, 0x03	; 3
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e2       	ldi	r26, 0x20	; 32
    219c:	b1 e4       	ldi	r27, 0x41	; 65
    219e:	8f a3       	std	Y+39, r24	; 0x27
    21a0:	98 a7       	std	Y+40, r25	; 0x28
    21a2:	a9 a7       	std	Y+41, r26	; 0x29
    21a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	6f a1       	ldd	r22, Y+39	; 0x27
    21a8:	78 a5       	ldd	r23, Y+40	; 0x28
    21aa:	89 a5       	ldd	r24, Y+41	; 0x29
    21ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a ef       	ldi	r20, 0xFA	; 250
    21b4:	54 e4       	ldi	r21, 0x44	; 68
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8b a3       	std	Y+35, r24	; 0x23
    21c0:	9c a3       	std	Y+36, r25	; 0x24
    21c2:	ad a3       	std	Y+37, r26	; 0x25
    21c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21c6:	6b a1       	ldd	r22, Y+35	; 0x23
    21c8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ca:	8d a1       	ldd	r24, Y+37	; 0x25
    21cc:	9e a1       	ldd	r25, Y+38	; 0x26
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <STEPPERMOTOR_voidRotCW+0x1a4>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9a a3       	std	Y+34, r25	; 0x22
    21e4:	89 a3       	std	Y+33, r24	; 0x21
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <STEPPERMOTOR_voidRotCW+0x222>
	else if (__tmp > 65535)
    21e8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ea:	7c a1       	ldd	r23, Y+36	; 0x24
    21ec:	8d a1       	ldd	r24, Y+37	; 0x25
    21ee:	9e a1       	ldd	r25, Y+38	; 0x26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	4f e7       	ldi	r20, 0x7F	; 127
    21f6:	57 e4       	ldi	r21, 0x47	; 71
    21f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <STEPPERMOTOR_voidRotCW+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	6f a1       	ldd	r22, Y+39	; 0x27
    2202:	78 a5       	ldd	r23, Y+40	; 0x28
    2204:	89 a5       	ldd	r24, Y+41	; 0x29
    2206:	9a a5       	ldd	r25, Y+42	; 0x2a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9a a3       	std	Y+34, r25	; 0x22
    2226:	89 a3       	std	Y+33, r24	; 0x21
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <STEPPERMOTOR_voidRotCW+0x204>
    222a:	88 ec       	ldi	r24, 0xC8	; 200
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	98 a3       	std	Y+32, r25	; 0x20
    2230:	8f 8f       	std	Y+31, r24	; 0x1f
    2232:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2234:	98 a1       	ldd	r25, Y+32	; 0x20
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <STEPPERMOTOR_voidRotCW+0x1f2>
    223a:	98 a3       	std	Y+32, r25	; 0x20
    223c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	89 a1       	ldd	r24, Y+33	; 0x21
    2240:	9a a1       	ldd	r25, Y+34	; 0x22
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9a a3       	std	Y+34, r25	; 0x22
    2246:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	89 a1       	ldd	r24, Y+33	; 0x21
    224a:	9a a1       	ldd	r25, Y+34	; 0x22
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	69 f7       	brne	.-38     	; 0x222a <STEPPERMOTOR_voidRotCW+0x1e6>
    2250:	14 c0       	rjmp	.+40     	; 0x227a <STEPPERMOTOR_voidRotCW+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6b a1       	ldd	r22, Y+35	; 0x23
    2254:	7c a1       	ldd	r23, Y+36	; 0x24
    2256:	8d a1       	ldd	r24, Y+37	; 0x25
    2258:	9e a1       	ldd	r25, Y+38	; 0x26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9a a3       	std	Y+34, r25	; 0x22
    2264:	89 a3       	std	Y+33, r24	; 0x21
    2266:	89 a1       	ldd	r24, Y+33	; 0x21
    2268:	9a a1       	ldd	r25, Y+34	; 0x22
    226a:	9e 8f       	std	Y+30, r25	; 0x1e
    226c:	8d 8f       	std	Y+29, r24	; 0x1d
    226e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2270:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <STEPPERMOTOR_voidRotCW+0x22e>
    2276:	9e 8f       	std	Y+30, r25	; 0x1e
    2278:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);

		//step 3
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_LOW);
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_LOW);
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_HIGH);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	62 e0       	ldi	r22, 0x02	; 2
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_LOW);
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	63 e0       	ldi	r22, 0x03	; 3
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 e2       	ldi	r26, 0x20	; 32
    22a8:	b1 e4       	ldi	r27, 0x41	; 65
    22aa:	89 8f       	std	Y+25, r24	; 0x19
    22ac:	9a 8f       	std	Y+26, r25	; 0x1a
    22ae:	ab 8f       	std	Y+27, r26	; 0x1b
    22b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8d 8b       	std	Y+21, r24	; 0x15
    22cc:	9e 8b       	std	Y+22, r25	; 0x16
    22ce:	af 8b       	std	Y+23, r26	; 0x17
    22d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <STEPPERMOTOR_voidRotCW+0x2b0>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <STEPPERMOTOR_voidRotCW+0x32e>
	else if (__tmp > 65535)
    22f4:	6d 89       	ldd	r22, Y+21	; 0x15
    22f6:	7e 89       	ldd	r23, Y+22	; 0x16
    22f8:	8f 89       	ldd	r24, Y+23	; 0x17
    22fa:	98 8d       	ldd	r25, Y+24	; 0x18
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <STEPPERMOTOR_voidRotCW+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	69 8d       	ldd	r22, Y+25	; 0x19
    230e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <STEPPERMOTOR_voidRotCW+0x310>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9a 8b       	std	Y+18, r25	; 0x12
    233c:	89 8b       	std	Y+17, r24	; 0x11
    233e:	89 89       	ldd	r24, Y+17	; 0x11
    2340:	9a 89       	ldd	r25, Y+18	; 0x12
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <STEPPERMOTOR_voidRotCW+0x2fe>
    2346:	9a 8b       	std	Y+18, r25	; 0x12
    2348:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8b 89       	ldd	r24, Y+19	; 0x13
    234c:	9c 89       	ldd	r25, Y+20	; 0x14
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8b 89       	ldd	r24, Y+19	; 0x13
    2356:	9c 89       	ldd	r25, Y+20	; 0x14
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <STEPPERMOTOR_voidRotCW+0x2f2>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <STEPPERMOTOR_voidRotCW+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9c 8b       	std	Y+20, r25	; 0x14
    2370:	8b 8b       	std	Y+19, r24	; 0x13
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	98 8b       	std	Y+16, r25	; 0x10
    2378:	8f 87       	std	Y+15, r24	; 0x0f
    237a:	8f 85       	ldd	r24, Y+15	; 0x0f
    237c:	98 89       	ldd	r25, Y+16	; 0x10
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <STEPPERMOTOR_voidRotCW+0x33a>
    2382:	98 8b       	std	Y+16, r25	; 0x10
    2384:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);


		//step 4

		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_LOW);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_LOW);
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_LOW);
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_HIGH);
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	63 e0       	ldi	r22, 0x03	; 3
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e2       	ldi	r26, 0x20	; 32
    23b4:	b1 e4       	ldi	r27, 0x41	; 65
    23b6:	8b 87       	std	Y+11, r24	; 0x0b
    23b8:	9c 87       	std	Y+12, r25	; 0x0c
    23ba:	ad 87       	std	Y+13, r26	; 0x0d
    23bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a ef       	ldi	r20, 0xFA	; 250
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	98 87       	std	Y+8, r25	; 0x08
    23da:	a9 87       	std	Y+9, r26	; 0x09
    23dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <STEPPERMOTOR_voidRotCW+0x3bc>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <STEPPERMOTOR_voidRotCW+0x43a>
	else if (__tmp > 65535)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <STEPPERMOTOR_voidRotCW+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <STEPPERMOTOR_voidRotCW+0x41c>
    2442:	88 ec       	ldi	r24, 0xC8	; 200
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	8b 83       	std	Y+3, r24	; 0x03
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <STEPPERMOTOR_voidRotCW+0x40a>
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <STEPPERMOTOR_voidRotCW+0x3fe>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <STEPPERMOTOR_voidRotCW+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <STEPPERMOTOR_voidRotCW+0x446>
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01

}
void STEPPERMOTOR_voidRotCW(u16 degrees){


	for(u16 iterations = 0 ; iterations < ((64 * degrees) /45); iterations++ ){
    2492:	89 ad       	ldd	r24, Y+57	; 0x39
    2494:	9a ad       	ldd	r25, Y+58	; 0x3a
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	9a af       	std	Y+58, r25	; 0x3a
    249a:	89 af       	std	Y+57, r24	; 0x39
    249c:	8b ad       	ldd	r24, Y+59	; 0x3b
    249e:	9c ad       	ldd	r25, Y+60	; 0x3c
    24a0:	00 24       	eor	r0, r0
    24a2:	96 95       	lsr	r25
    24a4:	87 95       	ror	r24
    24a6:	07 94       	ror	r0
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	07 94       	ror	r0
    24ae:	98 2f       	mov	r25, r24
    24b0:	80 2d       	mov	r24, r0
    24b2:	2d e2       	ldi	r18, 0x2D	; 45
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	b9 01       	movw	r22, r18
    24b8:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    24bc:	cb 01       	movw	r24, r22
    24be:	9c 01       	movw	r18, r24
    24c0:	89 ad       	ldd	r24, Y+57	; 0x39
    24c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    24c4:	82 17       	cp	r24, r18
    24c6:	93 07       	cpc	r25, r19
    24c8:	08 f4       	brcc	.+2      	; 0x24cc <STEPPERMOTOR_voidRotCW+0x488>
    24ca:	cb cd       	rjmp	.-1130   	; 0x2062 <STEPPERMOTOR_voidRotCW+0x1e>

	}



}
    24cc:	ec 96       	adiw	r28, 0x3c	; 60
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <STEPPERMOTOR_voidRotCCW>:

void STEPPERMOTOR_voidRotCCW(u16 degrees){
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	ec 97       	sbiw	r28, 0x3c	; 60
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	9c af       	std	Y+60, r25	; 0x3c
    24f4:	8b af       	std	Y+59, r24	; 0x3b

	for(u16 iterations = 0 ; iterations < ((64 * degrees) /45); iterations++ ){
    24f6:	1a ae       	std	Y+58, r1	; 0x3a
    24f8:	19 ae       	std	Y+57, r1	; 0x39
    24fa:	1d c2       	rjmp	.+1082   	; 0x2936 <STEPPERMOTOR_voidRotCCW+0x458>
	
		//step 4

		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_HIGH);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_HIGH);
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_HIGH);
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	62 e0       	ldi	r22, 0x02	; 2
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_LOW);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	63 e0       	ldi	r22, 0x03	; 3
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e2       	ldi	r26, 0x20	; 32
    252a:	b1 e4       	ldi	r27, 0x41	; 65
    252c:	8d ab       	std	Y+53, r24	; 0x35
    252e:	9e ab       	std	Y+54, r25	; 0x36
    2530:	af ab       	std	Y+55, r26	; 0x37
    2532:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6d a9       	ldd	r22, Y+53	; 0x35
    2536:	7e a9       	ldd	r23, Y+54	; 0x36
    2538:	8f a9       	ldd	r24, Y+55	; 0x37
    253a:	98 ad       	ldd	r25, Y+56	; 0x38
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	89 ab       	std	Y+49, r24	; 0x31
    254e:	9a ab       	std	Y+50, r25	; 0x32
    2550:	ab ab       	std	Y+51, r26	; 0x33
    2552:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2554:	69 a9       	ldd	r22, Y+49	; 0x31
    2556:	7a a9       	ldd	r23, Y+50	; 0x32
    2558:	8b a9       	ldd	r24, Y+51	; 0x33
    255a:	9c a9       	ldd	r25, Y+52	; 0x34
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <STEPPERMOTOR_voidRotCCW+0x98>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	98 ab       	std	Y+48, r25	; 0x30
    2572:	8f a7       	std	Y+47, r24	; 0x2f
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <STEPPERMOTOR_voidRotCCW+0x116>
	else if (__tmp > 65535)
    2576:	69 a9       	ldd	r22, Y+49	; 0x31
    2578:	7a a9       	ldd	r23, Y+50	; 0x32
    257a:	8b a9       	ldd	r24, Y+51	; 0x33
    257c:	9c a9       	ldd	r25, Y+52	; 0x34
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <STEPPERMOTOR_voidRotCCW+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6d a9       	ldd	r22, Y+53	; 0x35
    2590:	7e a9       	ldd	r23, Y+54	; 0x36
    2592:	8f a9       	ldd	r24, Y+55	; 0x37
    2594:	98 ad       	ldd	r25, Y+56	; 0x38
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	98 ab       	std	Y+48, r25	; 0x30
    25b4:	8f a7       	std	Y+47, r24	; 0x2f
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <STEPPERMOTOR_voidRotCCW+0xf8>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9e a7       	std	Y+46, r25	; 0x2e
    25be:	8d a7       	std	Y+45, r24	; 0x2d
    25c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    25c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <STEPPERMOTOR_voidRotCCW+0xe6>
    25c8:	9e a7       	std	Y+46, r25	; 0x2e
    25ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ce:	98 a9       	ldd	r25, Y+48	; 0x30
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	98 ab       	std	Y+48, r25	; 0x30
    25d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d8:	98 a9       	ldd	r25, Y+48	; 0x30
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <STEPPERMOTOR_voidRotCCW+0xda>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <STEPPERMOTOR_voidRotCCW+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	69 a9       	ldd	r22, Y+49	; 0x31
    25e2:	7a a9       	ldd	r23, Y+50	; 0x32
    25e4:	8b a9       	ldd	r24, Y+51	; 0x33
    25e6:	9c a9       	ldd	r25, Y+52	; 0x34
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	98 ab       	std	Y+48, r25	; 0x30
    25f2:	8f a7       	std	Y+47, r24	; 0x2f
    25f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f6:	98 a9       	ldd	r25, Y+48	; 0x30
    25f8:	9c a7       	std	Y+44, r25	; 0x2c
    25fa:	8b a7       	std	Y+43, r24	; 0x2b
    25fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <STEPPERMOTOR_voidRotCCW+0x122>
    2604:	9c a7       	std	Y+44, r25	; 0x2c
    2606:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		//step 3
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_HIGH);
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_HIGH);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	61 e0       	ldi	r22, 0x01	; 1
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_LOW);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	62 e0       	ldi	r22, 0x02	; 2
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_HIGH);
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	63 e0       	ldi	r22, 0x03	; 3
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a0 e2       	ldi	r26, 0x20	; 32
    2636:	b1 e4       	ldi	r27, 0x41	; 65
    2638:	8f a3       	std	Y+39, r24	; 0x27
    263a:	98 a7       	std	Y+40, r25	; 0x28
    263c:	a9 a7       	std	Y+41, r26	; 0x29
    263e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2640:	6f a1       	ldd	r22, Y+39	; 0x27
    2642:	78 a5       	ldd	r23, Y+40	; 0x28
    2644:	89 a5       	ldd	r24, Y+41	; 0x29
    2646:	9a a5       	ldd	r25, Y+42	; 0x2a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a ef       	ldi	r20, 0xFA	; 250
    264e:	54 e4       	ldi	r21, 0x44	; 68
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8b a3       	std	Y+35, r24	; 0x23
    265a:	9c a3       	std	Y+36, r25	; 0x24
    265c:	ad a3       	std	Y+37, r26	; 0x25
    265e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2660:	6b a1       	ldd	r22, Y+35	; 0x23
    2662:	7c a1       	ldd	r23, Y+36	; 0x24
    2664:	8d a1       	ldd	r24, Y+37	; 0x25
    2666:	9e a1       	ldd	r25, Y+38	; 0x26
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	5f e3       	ldi	r21, 0x3F	; 63
    2670:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2674:	88 23       	and	r24, r24
    2676:	2c f4       	brge	.+10     	; 0x2682 <STEPPERMOTOR_voidRotCCW+0x1a4>
		__ticks = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9a a3       	std	Y+34, r25	; 0x22
    267e:	89 a3       	std	Y+33, r24	; 0x21
    2680:	3f c0       	rjmp	.+126    	; 0x2700 <STEPPERMOTOR_voidRotCCW+0x222>
	else if (__tmp > 65535)
    2682:	6b a1       	ldd	r22, Y+35	; 0x23
    2684:	7c a1       	ldd	r23, Y+36	; 0x24
    2686:	8d a1       	ldd	r24, Y+37	; 0x25
    2688:	9e a1       	ldd	r25, Y+38	; 0x26
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	4c f5       	brge	.+82     	; 0x26ec <STEPPERMOTOR_voidRotCCW+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269a:	6f a1       	ldd	r22, Y+39	; 0x27
    269c:	78 a5       	ldd	r23, Y+40	; 0x28
    269e:	89 a5       	ldd	r24, Y+41	; 0x29
    26a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9a a3       	std	Y+34, r25	; 0x22
    26c0:	89 a3       	std	Y+33, r24	; 0x21
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <STEPPERMOTOR_voidRotCCW+0x204>
    26c4:	88 ec       	ldi	r24, 0xC8	; 200
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	98 a3       	std	Y+32, r25	; 0x20
    26ca:	8f 8f       	std	Y+31, r24	; 0x1f
    26cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ce:	98 a1       	ldd	r25, Y+32	; 0x20
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <STEPPERMOTOR_voidRotCCW+0x1f2>
    26d4:	98 a3       	std	Y+32, r25	; 0x20
    26d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	89 a1       	ldd	r24, Y+33	; 0x21
    26da:	9a a1       	ldd	r25, Y+34	; 0x22
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	9a a3       	std	Y+34, r25	; 0x22
    26e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e2:	89 a1       	ldd	r24, Y+33	; 0x21
    26e4:	9a a1       	ldd	r25, Y+34	; 0x22
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	69 f7       	brne	.-38     	; 0x26c4 <STEPPERMOTOR_voidRotCCW+0x1e6>
    26ea:	14 c0       	rjmp	.+40     	; 0x2714 <STEPPERMOTOR_voidRotCCW+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ec:	6b a1       	ldd	r22, Y+35	; 0x23
    26ee:	7c a1       	ldd	r23, Y+36	; 0x24
    26f0:	8d a1       	ldd	r24, Y+37	; 0x25
    26f2:	9e a1       	ldd	r25, Y+38	; 0x26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9a a3       	std	Y+34, r25	; 0x22
    26fe:	89 a3       	std	Y+33, r24	; 0x21
    2700:	89 a1       	ldd	r24, Y+33	; 0x21
    2702:	9a a1       	ldd	r25, Y+34	; 0x22
    2704:	9e 8f       	std	Y+30, r25	; 0x1e
    2706:	8d 8f       	std	Y+29, r24	; 0x1d
    2708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    270a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <STEPPERMOTOR_voidRotCCW+0x22e>
    2710:	9e 8f       	std	Y+30, r25	; 0x1e
    2712:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);

		//step 2
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_HIGH);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_LOW);
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_HIGH);
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	62 e0       	ldi	r22, 0x02	; 2
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_HIGH);
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	63 e0       	ldi	r22, 0x03	; 3
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e2       	ldi	r26, 0x20	; 32
    2742:	b1 e4       	ldi	r27, 0x41	; 65
    2744:	89 8f       	std	Y+25, r24	; 0x19
    2746:	9a 8f       	std	Y+26, r25	; 0x1a
    2748:	ab 8f       	std	Y+27, r26	; 0x1b
    274a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	69 8d       	ldd	r22, Y+25	; 0x19
    274e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4a ef       	ldi	r20, 0xFA	; 250
    275a:	54 e4       	ldi	r21, 0x44	; 68
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	8d 8b       	std	Y+21, r24	; 0x15
    2766:	9e 8b       	std	Y+22, r25	; 0x16
    2768:	af 8b       	std	Y+23, r26	; 0x17
    276a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    276c:	6d 89       	ldd	r22, Y+21	; 0x15
    276e:	7e 89       	ldd	r23, Y+22	; 0x16
    2770:	8f 89       	ldd	r24, Y+23	; 0x17
    2772:	98 8d       	ldd	r25, Y+24	; 0x18
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	2c f4       	brge	.+10     	; 0x278e <STEPPERMOTOR_voidRotCCW+0x2b0>
		__ticks = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9c 8b       	std	Y+20, r25	; 0x14
    278a:	8b 8b       	std	Y+19, r24	; 0x13
    278c:	3f c0       	rjmp	.+126    	; 0x280c <STEPPERMOTOR_voidRotCCW+0x32e>
	else if (__tmp > 65535)
    278e:	6d 89       	ldd	r22, Y+21	; 0x15
    2790:	7e 89       	ldd	r23, Y+22	; 0x16
    2792:	8f 89       	ldd	r24, Y+23	; 0x17
    2794:	98 8d       	ldd	r25, Y+24	; 0x18
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	4c f5       	brge	.+82     	; 0x27f8 <STEPPERMOTOR_voidRotCCW+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a6:	69 8d       	ldd	r22, Y+25	; 0x19
    27a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e2       	ldi	r20, 0x20	; 32
    27b4:	51 e4       	ldi	r21, 0x41	; 65
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	8b 8b       	std	Y+19, r24	; 0x13
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <STEPPERMOTOR_voidRotCCW+0x310>
    27d0:	88 ec       	ldi	r24, 0xC8	; 200
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9a 8b       	std	Y+18, r25	; 0x12
    27d6:	89 8b       	std	Y+17, r24	; 0x11
    27d8:	89 89       	ldd	r24, Y+17	; 0x11
    27da:	9a 89       	ldd	r25, Y+18	; 0x12
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <STEPPERMOTOR_voidRotCCW+0x2fe>
    27e0:	9a 8b       	std	Y+18, r25	; 0x12
    27e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e4:	8b 89       	ldd	r24, Y+19	; 0x13
    27e6:	9c 89       	ldd	r25, Y+20	; 0x14
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	9c 8b       	std	Y+20, r25	; 0x14
    27ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	69 f7       	brne	.-38     	; 0x27d0 <STEPPERMOTOR_voidRotCCW+0x2f2>
    27f6:	14 c0       	rjmp	.+40     	; 0x2820 <STEPPERMOTOR_voidRotCCW+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f8:	6d 89       	ldd	r22, Y+21	; 0x15
    27fa:	7e 89       	ldd	r23, Y+22	; 0x16
    27fc:	8f 89       	ldd	r24, Y+23	; 0x17
    27fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9c 8b       	std	Y+20, r25	; 0x14
    280a:	8b 8b       	std	Y+19, r24	; 0x13
    280c:	8b 89       	ldd	r24, Y+19	; 0x13
    280e:	9c 89       	ldd	r25, Y+20	; 0x14
    2810:	98 8b       	std	Y+16, r25	; 0x10
    2812:	8f 87       	std	Y+15, r24	; 0x0f
    2814:	8f 85       	ldd	r24, Y+15	; 0x0f
    2816:	98 89       	ldd	r25, Y+16	; 0x10
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <STEPPERMOTOR_voidRotCCW+0x33a>
    281c:	98 8b       	std	Y+16, r25	; 0x10
    281e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);

			//step 1
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_PINK_PIN , DIO_LOW);
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_BLUE_PIN , DIO_HIGH);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_YELLOW_PIN , DIO_HIGH);
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	62 e0       	ldi	r22, 0x02	; 2
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPERMOTOR_PORT, STEPPERMOTOR_ORANGE_PIN , DIO_HIGH);
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	63 e0       	ldi	r22, 0x03	; 3
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	a0 e2       	ldi	r26, 0x20	; 32
    284e:	b1 e4       	ldi	r27, 0x41	; 65
    2850:	8b 87       	std	Y+11, r24	; 0x0b
    2852:	9c 87       	std	Y+12, r25	; 0x0c
    2854:	ad 87       	std	Y+13, r26	; 0x0d
    2856:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2858:	6b 85       	ldd	r22, Y+11	; 0x0b
    285a:	7c 85       	ldd	r23, Y+12	; 0x0c
    285c:	8d 85       	ldd	r24, Y+13	; 0x0d
    285e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4a ef       	ldi	r20, 0xFA	; 250
    2866:	54 e4       	ldi	r21, 0x44	; 68
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	8f 83       	std	Y+7, r24	; 0x07
    2872:	98 87       	std	Y+8, r25	; 0x08
    2874:	a9 87       	std	Y+9, r26	; 0x09
    2876:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2878:	6f 81       	ldd	r22, Y+7	; 0x07
    287a:	78 85       	ldd	r23, Y+8	; 0x08
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e8       	ldi	r20, 0x80	; 128
    2886:	5f e3       	ldi	r21, 0x3F	; 63
    2888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288c:	88 23       	and	r24, r24
    288e:	2c f4       	brge	.+10     	; 0x289a <STEPPERMOTOR_voidRotCCW+0x3bc>
		__ticks = 1;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9e 83       	std	Y+6, r25	; 0x06
    2896:	8d 83       	std	Y+5, r24	; 0x05
    2898:	3f c0       	rjmp	.+126    	; 0x2918 <STEPPERMOTOR_voidRotCCW+0x43a>
	else if (__tmp > 65535)
    289a:	6f 81       	ldd	r22, Y+7	; 0x07
    289c:	78 85       	ldd	r23, Y+8	; 0x08
    289e:	89 85       	ldd	r24, Y+9	; 0x09
    28a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	3f ef       	ldi	r19, 0xFF	; 255
    28a6:	4f e7       	ldi	r20, 0x7F	; 127
    28a8:	57 e4       	ldi	r21, 0x47	; 71
    28aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ae:	18 16       	cp	r1, r24
    28b0:	4c f5       	brge	.+82     	; 0x2904 <STEPPERMOTOR_voidRotCCW+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	51 e4       	ldi	r21, 0x41	; 65
    28c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <STEPPERMOTOR_voidRotCCW+0x41c>
    28dc:	88 ec       	ldi	r24, 0xC8	; 200
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9c 83       	std	Y+4, r25	; 0x04
    28e2:	8b 83       	std	Y+3, r24	; 0x03
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	9c 81       	ldd	r25, Y+4	; 0x04
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <STEPPERMOTOR_voidRotCCW+0x40a>
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	69 f7       	brne	.-38     	; 0x28dc <STEPPERMOTOR_voidRotCCW+0x3fe>
    2902:	14 c0       	rjmp	.+40     	; 0x292c <STEPPERMOTOR_voidRotCCW+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <STEPPERMOTOR_voidRotCCW+0x446>
    2928:	9a 83       	std	Y+2, r25	; 0x02
    292a:	89 83       	std	Y+1, r24	; 0x01

}

void STEPPERMOTOR_voidRotCCW(u16 degrees){

	for(u16 iterations = 0 ; iterations < ((64 * degrees) /45); iterations++ ){
    292c:	89 ad       	ldd	r24, Y+57	; 0x39
    292e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	9a af       	std	Y+58, r25	; 0x3a
    2934:	89 af       	std	Y+57, r24	; 0x39
    2936:	8b ad       	ldd	r24, Y+59	; 0x3b
    2938:	9c ad       	ldd	r25, Y+60	; 0x3c
    293a:	00 24       	eor	r0, r0
    293c:	96 95       	lsr	r25
    293e:	87 95       	ror	r24
    2940:	07 94       	ror	r0
    2942:	96 95       	lsr	r25
    2944:	87 95       	ror	r24
    2946:	07 94       	ror	r0
    2948:	98 2f       	mov	r25, r24
    294a:	80 2d       	mov	r24, r0
    294c:	2d e2       	ldi	r18, 0x2D	; 45
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	b9 01       	movw	r22, r18
    2952:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    2956:	cb 01       	movw	r24, r22
    2958:	9c 01       	movw	r18, r24
    295a:	89 ad       	ldd	r24, Y+57	; 0x39
    295c:	9a ad       	ldd	r25, Y+58	; 0x3a
    295e:	82 17       	cp	r24, r18
    2960:	93 07       	cpc	r25, r19
    2962:	08 f4       	brcc	.+2      	; 0x2966 <STEPPERMOTOR_voidRotCCW+0x488>
    2964:	cb cd       	rjmp	.-1130   	; 0x24fc <STEPPERMOTOR_voidRotCCW+0x1e>





}
    2966:	ec 96       	adiw	r28, 0x3c	; 60
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <SSD_voidInit>:
#include "SSD_config.h"
#include "SSD_private.h"
#include "SSD_interface.h"


void SSD_voidInit			(SSD_t * Copy_pstructSSD){
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	00 d0       	rcall	.+0      	; 0x297e <SSD_voidInit+0x6>
    297e:	00 d0       	rcall	.+0      	; 0x2980 <SSD_voidInit+0x8>
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01

    DIO_voidSetPortDirection(Copy_pstructSSD->Port , DIO_OUTPUT);
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	fa 81       	ldd	r31, Y+2	; 0x02
    298c:	80 81       	ld	r24, Z
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <DIO_voidSetPortDirection>
    switch(Copy_pstructSSD->CommonState){
    2994:	e9 81       	ldd	r30, Y+1	; 0x01
    2996:	fa 81       	ldd	r31, Y+2	; 0x02
    2998:	81 81       	ldd	r24, Z+1	; 0x01
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	3c 83       	std	Y+4, r19	; 0x04
    29a0:	2b 83       	std	Y+3, r18	; 0x03
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	9c 81       	ldd	r25, Y+4	; 0x04
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	61 f0       	breq	.+24     	; 0x29c2 <SSD_voidInit+0x4a>
    29aa:	2b 81       	ldd	r18, Y+3	; 0x03
    29ac:	3c 81       	ldd	r19, Y+4	; 0x04
    29ae:	21 30       	cpi	r18, 0x01	; 1
    29b0:	31 05       	cpc	r19, r1
    29b2:	69 f4       	brne	.+26     	; 0x29ce <SSD_voidInit+0x56>
        case SSD_COMMON_ANODE:
        DIO_voidSetPortValue(Copy_pstructSSD->Port , 0xff );
    29b4:	e9 81       	ldd	r30, Y+1	; 0x01
    29b6:	fa 81       	ldd	r31, Y+2	; 0x02
    29b8:	80 81       	ld	r24, Z
    29ba:	6f ef       	ldi	r22, 0xFF	; 255
    29bc:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
    29c0:	06 c0       	rjmp	.+12     	; 0x29ce <SSD_voidInit+0x56>
        break;
       
        case SSD_COMMON_CATHODE:
        DIO_voidSetPortValue(Copy_pstructSSD->Port , 0x00 );
    29c2:	e9 81       	ldd	r30, Y+1	; 0x01
    29c4:	fa 81       	ldd	r31, Y+2	; 0x02
    29c6:	80 81       	ld	r24, Z
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
       default:
       break;

    }

}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <SSD_voidEnable>:
void SSD_voidEnable			(SSD_t * Copy_pstructSSD ,u8 Copy_u8Number ){
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <SSD_voidEnable+0x6>
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <SSD_voidEnable+0x8>
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	6b 83       	std	Y+3, r22	; 0x03

    switch(Copy_pstructSSD->CommonState){
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	81 81       	ldd	r24, Z+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	3d 83       	std	Y+5, r19	; 0x05
    29fc:	2c 83       	std	Y+4, r18	; 0x04
    29fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2a00:	9d 81       	ldd	r25, Y+5	; 0x05
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	31 f0       	breq	.+12     	; 0x2a12 <SSD_voidEnable+0x36>
    2a06:	2c 81       	ldd	r18, Y+4	; 0x04
    2a08:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0a:	21 30       	cpi	r18, 0x01	; 1
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	81 f0       	breq	.+32     	; 0x2a30 <SSD_voidEnable+0x54>
    2a10:	1f c0       	rjmp	.+62     	; 0x2a50 <SSD_voidEnable+0x74>
          case SSD_COMMON_CATHODE:
        DIO_voidSetPortValue(Copy_pstructSSD->Port , ArrayNumbers[Copy_u8Number] );
    2a12:	e9 81       	ldd	r30, Y+1	; 0x01
    2a14:	fa 81       	ldd	r31, Y+2	; 0x02
    2a16:	20 81       	ld	r18, Z
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	88 2f       	mov	r24, r24
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	fc 01       	movw	r30, r24
    2a20:	e8 58       	subi	r30, 0x88	; 136
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	90 81       	ld	r25, Z
    2a26:	82 2f       	mov	r24, r18
    2a28:	69 2f       	mov	r22, r25
    2a2a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
    2a2e:	10 c0       	rjmp	.+32     	; 0x2a50 <SSD_voidEnable+0x74>
        break;
       
        case SSD_COMMON_ANODE:
        DIO_voidSetPortValue(Copy_pstructSSD->Port , ~ArrayNumbers[Copy_u8Number] );
    2a30:	e9 81       	ldd	r30, Y+1	; 0x01
    2a32:	fa 81       	ldd	r31, Y+2	; 0x02
    2a34:	20 81       	ld	r18, Z
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	e8 58       	subi	r30, 0x88	; 136
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	98 2f       	mov	r25, r24
    2a46:	90 95       	com	r25
    2a48:	82 2f       	mov	r24, r18
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
       
       default:
       break;
        
    }
}
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <SSD_voidDisable>:
void SSD_voidDisable		(SSD_t * Copy_pstructSSD){
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <SSD_voidDisable+0x6>
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <SSD_voidDisable+0x8>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
       
        switch(Copy_pstructSSD->CommonState){
    2a70:	e9 81       	ldd	r30, Y+1	; 0x01
    2a72:	fa 81       	ldd	r31, Y+2	; 0x02
    2a74:	81 81       	ldd	r24, Z+1	; 0x01
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	3c 83       	std	Y+4, r19	; 0x04
    2a7c:	2b 83       	std	Y+3, r18	; 0x03
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	9c 81       	ldd	r25, Y+4	; 0x04
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	61 f0       	breq	.+24     	; 0x2a9e <SSD_voidDisable+0x3e>
    2a86:	2b 81       	ldd	r18, Y+3	; 0x03
    2a88:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8a:	21 30       	cpi	r18, 0x01	; 1
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	69 f4       	brne	.+26     	; 0x2aaa <SSD_voidDisable+0x4a>
        case SSD_COMMON_ANODE:
        DIO_voidSetPortValue(Copy_pstructSSD->Port , 0xff );
    2a90:	e9 81       	ldd	r30, Y+1	; 0x01
    2a92:	fa 81       	ldd	r31, Y+2	; 0x02
    2a94:	80 81       	ld	r24, Z
    2a96:	6f ef       	ldi	r22, 0xFF	; 255
    2a98:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
    2a9c:	06 c0       	rjmp	.+12     	; 0x2aaa <SSD_voidDisable+0x4a>
        break;
       
        case SSD_COMMON_CATHODE:
        DIO_voidSetPortValue(Copy_pstructSSD->Port , 0x00 );
    2a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa2:	80 81       	ld	r24, Z
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
       
       default:
       break;

    }
}
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <LED_voidInit>:
#include "LED_interface.h"



void LED_voidInit		(LED_t * Copy_pstructLed )
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <LED_voidInit+0x6>
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <LED_voidInit+0x8>
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_OUTPUT);
    2ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aca:	fa 81       	ldd	r31, Y+2	; 0x02
    2acc:	80 81       	ld	r24, Z
    2ace:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	69 2f       	mov	r22, r25
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
	switch(Copy_pstructLed -> ActiveState)
    2adc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ade:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	3c 83       	std	Y+4, r19	; 0x04
    2ae8:	2b 83       	std	Y+3, r18	; 0x03
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	9c 81       	ldd	r25, Y+4	; 0x04
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	81 f0       	breq	.+32     	; 0x2b12 <LED_voidInit+0x5a>
    2af2:	2b 81       	ldd	r18, Y+3	; 0x03
    2af4:	3c 81       	ldd	r19, Y+4	; 0x04
    2af6:	21 30       	cpi	r18, 0x01	; 1
    2af8:	31 05       	cpc	r19, r1
    2afa:	a9 f4       	brne	.+42     	; 0x2b26 <LED_voidInit+0x6e>
	{
	case LED_ACTIVE_HIGH :
		DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    2afc:	e9 81       	ldd	r30, Y+1	; 0x01
    2afe:	fa 81       	ldd	r31, Y+2	; 0x02
    2b00:	80 81       	ld	r24, Z
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	69 2f       	mov	r22, r25
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    2b10:	0a c0       	rjmp	.+20     	; 0x2b26 <LED_voidInit+0x6e>
		break;
	case LED_ACTIVE_LOW :
		DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    2b12:	e9 81       	ldd	r30, Y+1	; 0x01
    2b14:	fa 81       	ldd	r31, Y+2	; 0x02
    2b16:	80 81       	ld	r24, Z
    2b18:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	69 2f       	mov	r22, r25
    2b20:	41 e0       	ldi	r20, 0x01	; 1
    2b22:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
		break;
	default:
		break;
	}
}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <LED_voidOn>:
void LED_voidOn			(LED_t * Copy_pstructLed )
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <LED_voidOn+0x6>
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <LED_voidOn+0x8>
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	9a 83       	std	Y+2, r25	; 0x02
    2b42:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_pstructLed -> ActiveState)
    2b44:	e9 81       	ldd	r30, Y+1	; 0x01
    2b46:	fa 81       	ldd	r31, Y+2	; 0x02
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	3c 83       	std	Y+4, r19	; 0x04
    2b50:	2b 83       	std	Y+3, r18	; 0x03
    2b52:	8b 81       	ldd	r24, Y+3	; 0x03
    2b54:	9c 81       	ldd	r25, Y+4	; 0x04
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	81 f0       	breq	.+32     	; 0x2b7a <LED_voidOn+0x46>
    2b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b5e:	21 30       	cpi	r18, 0x01	; 1
    2b60:	31 05       	cpc	r19, r1
    2b62:	a9 f4       	brne	.+42     	; 0x2b8e <LED_voidOn+0x5a>
		{
		case LED_ACTIVE_HIGH :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    2b64:	e9 81       	ldd	r30, Y+1	; 0x01
    2b66:	fa 81       	ldd	r31, Y+2	; 0x02
    2b68:	80 81       	ld	r24, Z
    2b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	69 2f       	mov	r22, r25
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    2b78:	0a c0       	rjmp	.+20     	; 0x2b8e <LED_voidOn+0x5a>
			break;
		case LED_ACTIVE_LOW :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    2b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7e:	80 81       	ld	r24, Z
    2b80:	e9 81       	ldd	r30, Y+1	; 0x01
    2b82:	fa 81       	ldd	r31, Y+2	; 0x02
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	69 2f       	mov	r22, r25
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
			break;
		default:
			break;
		}
}
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	08 95       	ret

00002b9c <LED_voidOff>:
void LED_voidOff		(LED_t * Copy_pstructLed )
{
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	00 d0       	rcall	.+0      	; 0x2ba2 <LED_voidOff+0x6>
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <LED_voidOff+0x8>
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	9a 83       	std	Y+2, r25	; 0x02
    2baa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_pstructLed -> ActiveState)
    2bac:	e9 81       	ldd	r30, Y+1	; 0x01
    2bae:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	3c 83       	std	Y+4, r19	; 0x04
    2bb8:	2b 83       	std	Y+3, r18	; 0x03
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	81 f0       	breq	.+32     	; 0x2be2 <LED_voidOff+0x46>
    2bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc6:	21 30       	cpi	r18, 0x01	; 1
    2bc8:	31 05       	cpc	r19, r1
    2bca:	a9 f4       	brne	.+42     	; 0x2bf6 <LED_voidOff+0x5a>
		{
		case LED_ACTIVE_HIGH :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    2bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bce:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd0:	80 81       	ld	r24, Z
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	69 2f       	mov	r22, r25
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    2be0:	0a c0       	rjmp	.+20     	; 0x2bf6 <LED_voidOff+0x5a>
			break;
		case LED_ACTIVE_LOW :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    2be2:	e9 81       	ldd	r30, Y+1	; 0x01
    2be4:	fa 81       	ldd	r31, Y+2	; 0x02
    2be6:	80 81       	ld	r24, Z
    2be8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bea:	fa 81       	ldd	r31, Y+2	; 0x02
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	69 2f       	mov	r22, r25
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
			break;
		default:
			break;
		}
}
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <KPAD_voidInit>:
#include "KPAD_config.h"
#include "KPAD_private.h"


void KPAD_voidInit      (void)  
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    /* Set Rows To Input*/
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_R0 , DIO_INPUT);
    2c0c:	83 e0       	ldi	r24, 0x03	; 3
    2c0e:	60 e0       	ldi	r22, 0x00	; 0
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_R1 , DIO_INPUT);
    2c16:	83 e0       	ldi	r24, 0x03	; 3
    2c18:	61 e0       	ldi	r22, 0x01	; 1
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_R2 , DIO_INPUT);
    2c20:	83 e0       	ldi	r24, 0x03	; 3
    2c22:	62 e0       	ldi	r22, 0x02	; 2
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_R3 , DIO_INPUT);
    2c2a:	83 e0       	ldi	r24, 0x03	; 3
    2c2c:	63 e0       	ldi	r22, 0x03	; 3
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    /* Set Rows as PULL UP*/
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R0 , DIO_HIGH);
    2c34:	83 e0       	ldi	r24, 0x03	; 3
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	41 e0       	ldi	r20, 0x01	; 1
    2c3a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R1 , DIO_HIGH);
    2c3e:	83 e0       	ldi	r24, 0x03	; 3
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R2 , DIO_HIGH);
    2c48:	83 e0       	ldi	r24, 0x03	; 3
    2c4a:	62 e0       	ldi	r22, 0x02	; 2
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R3 , DIO_HIGH);
    2c52:	83 e0       	ldi	r24, 0x03	; 3
    2c54:	63 e0       	ldi	r22, 0x03	; 3
    2c56:	41 e0       	ldi	r20, 0x01	; 1
    2c58:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>

    /*Set Cols to OUTPUT*/
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_C0 , DIO_OUTPUT);
    2c5c:	83 e0       	ldi	r24, 0x03	; 3
    2c5e:	64 e0       	ldi	r22, 0x04	; 4
    2c60:	41 e0       	ldi	r20, 0x01	; 1
    2c62:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_C1 , DIO_OUTPUT);
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	65 e0       	ldi	r22, 0x05	; 5
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_C2 , DIO_OUTPUT);
    2c70:	83 e0       	ldi	r24, 0x03	; 3
    2c72:	66 e0       	ldi	r22, 0x06	; 6
    2c74:	41 e0       	ldi	r20, 0x01	; 1
    2c76:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT , KPAD_C3 , DIO_OUTPUT);
    2c7a:	83 e0       	ldi	r24, 0x03	; 3
    2c7c:	67 e0       	ldi	r22, 0x07	; 7
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>

    DIO_voidSetPinValue (KPAD_PORT , KPAD_C0 , DIO_HIGH);
    2c84:	83 e0       	ldi	r24, 0x03	; 3
    2c86:	64 e0       	ldi	r22, 0x04	; 4
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C1 , DIO_HIGH);
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	65 e0       	ldi	r22, 0x05	; 5
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C2 , DIO_HIGH);
    2c98:	83 e0       	ldi	r24, 0x03	; 3
    2c9a:	66 e0       	ldi	r22, 0x06	; 6
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C3 , DIO_HIGH);
    2ca2:	83 e0       	ldi	r24, 0x03	; 3
    2ca4:	67 e0       	ldi	r22, 0x07	; 7
    2ca6:	41 e0       	ldi	r20, 0x01	; 1
    2ca8:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
}
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <KPAD_u8GetPressed>:

u8 KPAD_u8GetPressed    (void)  
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	62 97       	sbiw	r28, 0x12	; 18
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8RetrunedValue = 255 ;
    2cc6:	8f ef       	ldi	r24, 0xFF	; 255
    2cc8:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8GetPressed   ;
    u8 Local_u8Col            ;
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    2cca:	84 e0       	ldi	r24, 0x04	; 4
    2ccc:	88 8b       	std	Y+16, r24	; 0x10
    2cce:	b7 c0       	rjmp	.+366    	; 0x2e3e <KPAD_u8GetPressed+0x18c>
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
    2cd0:	83 e0       	ldi	r24, 0x03	; 3
    2cd2:	68 89       	ldd	r22, Y+16	; 0x10
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    2cda:	1f 86       	std	Y+15, r1	; 0x0f
    2cdc:	a4 c0       	rjmp	.+328    	; 0x2e26 <KPAD_u8GetPressed+0x174>
        {

           Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ce2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <DIO_u8GetPinValue>
    2ce6:	89 8b       	std	Y+17, r24	; 0x11
           if(Local_u8GetPressed == 0)
    2ce8:	89 89       	ldd	r24, Y+17	; 0x11
    2cea:	88 23       	and	r24, r24
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <KPAD_u8GetPressed+0x3e>
    2cee:	98 c0       	rjmp	.+304    	; 0x2e20 <KPAD_u8GetPressed+0x16e>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a8 e4       	ldi	r26, 0x48	; 72
    2cf6:	b2 e4       	ldi	r27, 0x42	; 66
    2cf8:	8b 87       	std	Y+11, r24	; 0x0b
    2cfa:	9c 87       	std	Y+12, r25	; 0x0c
    2cfc:	ad 87       	std	Y+13, r26	; 0x0d
    2cfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	4a ef       	ldi	r20, 0xFA	; 250
    2d0e:	54 e4       	ldi	r21, 0x44	; 68
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	8f 83       	std	Y+7, r24	; 0x07
    2d1a:	98 87       	std	Y+8, r25	; 0x08
    2d1c:	a9 87       	std	Y+9, r26	; 0x09
    2d1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d20:	6f 81       	ldd	r22, Y+7	; 0x07
    2d22:	78 85       	ldd	r23, Y+8	; 0x08
    2d24:	89 85       	ldd	r24, Y+9	; 0x09
    2d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e8       	ldi	r20, 0x80	; 128
    2d2e:	5f e3       	ldi	r21, 0x3F	; 63
    2d30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d34:	88 23       	and	r24, r24
    2d36:	2c f4       	brge	.+10     	; 0x2d42 <KPAD_u8GetPressed+0x90>
		__ticks = 1;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	3f c0       	rjmp	.+126    	; 0x2dc0 <KPAD_u8GetPressed+0x10e>
	else if (__tmp > 65535)
    2d42:	6f 81       	ldd	r22, Y+7	; 0x07
    2d44:	78 85       	ldd	r23, Y+8	; 0x08
    2d46:	89 85       	ldd	r24, Y+9	; 0x09
    2d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	3f ef       	ldi	r19, 0xFF	; 255
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	57 e4       	ldi	r21, 0x47	; 71
    2d52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d56:	18 16       	cp	r1, r24
    2d58:	4c f5       	brge	.+82     	; 0x2dac <KPAD_u8GetPressed+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9e 83       	std	Y+6, r25	; 0x06
    2d80:	8d 83       	std	Y+5, r24	; 0x05
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <KPAD_u8GetPressed+0xf0>
    2d84:	88 ec       	ldi	r24, 0xC8	; 200
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	9c 83       	std	Y+4, r25	; 0x04
    2d8a:	8b 83       	std	Y+3, r24	; 0x03
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <KPAD_u8GetPressed+0xde>
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	69 f7       	brne	.-38     	; 0x2d84 <KPAD_u8GetPressed+0xd2>
    2daa:	14 c0       	rjmp	.+40     	; 0x2dd4 <KPAD_u8GetPressed+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dac:	6f 81       	ldd	r22, Y+7	; 0x07
    2dae:	78 85       	ldd	r23, Y+8	; 0x08
    2db0:	89 85       	ldd	r24, Y+9	; 0x09
    2db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	9a 83       	std	Y+2, r25	; 0x02
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	9a 81       	ldd	r25, Y+2	; 0x02
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <KPAD_u8GetPressed+0x11a>
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
           {
            /*  Debouncing */
            _delay_ms(50);
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    2dd4:	83 e0       	ldi	r24, 0x03	; 3
    2dd6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2dd8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <DIO_u8GetPinValue>
    2ddc:	89 8b       	std	Y+17, r24	; 0x11
            if(Local_u8GetPressed == 0)
    2dde:	89 89       	ldd	r24, Y+17	; 0x11
    2de0:	88 23       	and	r24, r24
    2de2:	d9 f4       	brne	.+54     	; 0x2e1a <KPAD_u8GetPressed+0x168>
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
    2de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de6:	48 2f       	mov	r20, r24
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	88 89       	ldd	r24, Y+16	; 0x10
    2dec:	88 2f       	mov	r24, r24
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9c 01       	movw	r18, r24
    2df2:	24 50       	subi	r18, 0x04	; 4
    2df4:	30 40       	sbci	r19, 0x00	; 0
    2df6:	ca 01       	movw	r24, r20
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	82 0f       	add	r24, r18
    2e02:	93 1f       	adc	r25, r19
    2e04:	fc 01       	movw	r30, r24
    2e06:	e8 59       	subi	r30, 0x98	; 152
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	8a 8b       	std	Y+18, r24	; 0x12
    2e0e:	05 c0       	rjmp	.+10     	; 0x2e1a <KPAD_u8GetPressed+0x168>
            }
            while(Local_u8GetPressed ==0 )
            {
                Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    2e10:	83 e0       	ldi	r24, 0x03	; 3
    2e12:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e14:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <DIO_u8GetPinValue>
    2e18:	89 8b       	std	Y+17, r24	; 0x11
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
            if(Local_u8GetPressed == 0)
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
            }
            while(Local_u8GetPressed ==0 )
    2e1a:	89 89       	ldd	r24, Y+17	; 0x11
    2e1c:	88 23       	and	r24, r24
    2e1e:	c1 f3       	breq	.-16     	; 0x2e10 <KPAD_u8GetPressed+0x15e>
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    2e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	8f 87       	std	Y+15, r24	; 0x0f
    2e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e28:	84 30       	cpi	r24, 0x04	; 4
    2e2a:	08 f4       	brcc	.+2      	; 0x2e2e <KPAD_u8GetPressed+0x17c>
    2e2c:	58 cf       	rjmp	.-336    	; 0x2cde <KPAD_u8GetPressed+0x2c>

           }

        }

        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    2e2e:	83 e0       	ldi	r24, 0x03	; 3
    2e30:	68 89       	ldd	r22, Y+16	; 0x10
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    u8 Local_u8RetrunedValue = 255 ;
    u8 Local_u8GetPressed   ;
    u8 Local_u8Col            ;
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    2e38:	88 89       	ldd	r24, Y+16	; 0x10
    2e3a:	8f 5f       	subi	r24, 0xFF	; 255
    2e3c:	88 8b       	std	Y+16, r24	; 0x10
    2e3e:	88 89       	ldd	r24, Y+16	; 0x10
    2e40:	88 30       	cpi	r24, 0x08	; 8
    2e42:	08 f4       	brcc	.+2      	; 0x2e46 <KPAD_u8GetPressed+0x194>
    2e44:	45 cf       	rjmp	.-374    	; 0x2cd0 <KPAD_u8GetPressed+0x1e>

        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    }    


    return Local_u8RetrunedValue ;
    2e46:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2e48:	62 96       	adiw	r28, 0x12	; 18
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <CLCD_voidInit>:
#include "CLCD_private.h"
#include "CLCD_interface.h"



void CLCD_voidInit(void){
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	cc 54       	subi	r28, 0x4C	; 76
    2e68:	d0 40       	sbci	r29, 0x00	; 0
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61

	/* Directions of the pins*/
	DIO_voidSetPortDirection(CLCD_DATA_PORT,DIO_OUTPUT);
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	61 e0       	ldi	r22, 0x01	; 1
    2e78:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_OUTPUT);
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	41 e0       	ldi	r20, 0x01	; 1
    2e82:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_OUTPUT);
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	41 e0       	ldi	r20, 0x01	; 1
    2e8c:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_OUTPUT);
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	62 e0       	ldi	r22, 0x02	; 2
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_voidSetPinDirection>
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e7 5b       	subi	r30, 0xB7	; 183
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 e2       	ldi	r26, 0x20	; 32
    2ea6:	b2 e4       	ldi	r27, 0x42	; 66
    2ea8:	80 83       	st	Z, r24
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	a2 83       	std	Z+2, r26	; 0x02
    2eae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb0:	8e 01       	movw	r16, r28
    2eb2:	0b 5b       	subi	r16, 0xBB	; 187
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e7 5b       	subi	r30, 0xB7	; 183
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	60 81       	ld	r22, Z
    2ebe:	71 81       	ldd	r23, Z+1	; 0x01
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	4a ef       	ldi	r20, 0xFA	; 250
    2eca:	54 e4       	ldi	r21, 0x44	; 68
    2ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	f8 01       	movw	r30, r16
    2ed6:	80 83       	st	Z, r24
    2ed8:	91 83       	std	Z+1, r25	; 0x01
    2eda:	a2 83       	std	Z+2, r26	; 0x02
    2edc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ede:	fe 01       	movw	r30, r28
    2ee0:	eb 5b       	subi	r30, 0xBB	; 187
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	44 f4       	brge	.+16     	; 0x2f0c <CLCD_voidInit+0xb2>
		__ticks = 1;
    2efc:	fe 01       	movw	r30, r28
    2efe:	ed 5b       	subi	r30, 0xBD	; 189
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	80 83       	st	Z, r24
    2f0a:	64 c0       	rjmp	.+200    	; 0x2fd4 <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	eb 5b       	subi	r30, 0xBB	; 187
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	82 81       	ldd	r24, Z+2	; 0x02
    2f18:	93 81       	ldd	r25, Z+3	; 0x03
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	3f ef       	ldi	r19, 0xFF	; 255
    2f1e:	4f e7       	ldi	r20, 0x7F	; 127
    2f20:	57 e4       	ldi	r21, 0x47	; 71
    2f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f26:	18 16       	cp	r1, r24
    2f28:	0c f0       	brlt	.+2      	; 0x2f2c <CLCD_voidInit+0xd2>
    2f2a:	43 c0       	rjmp	.+134    	; 0x2fb2 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e7 5b       	subi	r30, 0xB7	; 183
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	40 e2       	ldi	r20, 0x20	; 32
    2f40:	51 e4       	ldi	r21, 0x41	; 65
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8e 01       	movw	r16, r28
    2f4c:	0d 5b       	subi	r16, 0xBD	; 189
    2f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	f8 01       	movw	r30, r16
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	1f c0       	rjmp	.+62     	; 0x2fa2 <CLCD_voidInit+0x148>
    2f64:	fe 01       	movw	r30, r28
    2f66:	ef 5b       	subi	r30, 0xBF	; 191
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	88 ec       	ldi	r24, 0xC8	; 200
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	fe 01       	movw	r30, r28
    2f74:	ef 5b       	subi	r30, 0xBF	; 191
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <CLCD_voidInit+0x122>
    2f80:	fe 01       	movw	r30, r28
    2f82:	ef 5b       	subi	r30, 0xBF	; 191
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	de 01       	movw	r26, r28
    2f8c:	ad 5b       	subi	r26, 0xBD	; 189
    2f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f90:	fe 01       	movw	r30, r28
    2f92:	ed 5b       	subi	r30, 0xBD	; 189
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	9c 93       	st	X, r25
    2fa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ed 5b       	subi	r30, 0xBD	; 189
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	d1 f6       	brne	.-76     	; 0x2f64 <CLCD_voidInit+0x10a>
    2fb0:	24 c0       	rjmp	.+72     	; 0x2ffa <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb2:	8e 01       	movw	r16, r28
    2fb4:	0d 5b       	subi	r16, 0xBD	; 189
    2fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb8:	fe 01       	movw	r30, r28
    2fba:	eb 5b       	subi	r30, 0xBB	; 187
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	60 81       	ld	r22, Z
    2fc0:	71 81       	ldd	r23, Z+1	; 0x01
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	f8 01       	movw	r30, r16
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	80 83       	st	Z, r24
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	ed 5b       	subi	r30, 0xBD	; 189
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	80 81       	ld	r24, Z
    2fdc:	91 81       	ldd	r25, Z+1	; 0x01
    2fde:	fe 01       	movw	r30, r28
    2fe0:	ff 96       	adiw	r30, 0x3f	; 63
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	80 83       	st	Z, r24
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	ff 96       	adiw	r30, 0x3f	; 63
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <CLCD_voidInit+0x194>
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	ff 96       	adiw	r30, 0x3f	; 63
    2ff6:	91 83       	std	Z+1, r25	; 0x01
    2ff8:	80 83       	st	Z, r24
	/* Power on sequence*/

	_delay_ms(40);

	//Function Set
	CLCD_voidSendCommand(0b00111000);
    2ffa:	88 e3       	ldi	r24, 0x38	; 56
    2ffc:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a8 e4       	ldi	r26, 0x48	; 72
    3006:	b2 e4       	ldi	r27, 0x42	; 66
    3008:	8b af       	std	Y+59, r24	; 0x3b
    300a:	9c af       	std	Y+60, r25	; 0x3c
    300c:	ad af       	std	Y+61, r26	; 0x3d
    300e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3010:	6b ad       	ldd	r22, Y+59	; 0x3b
    3012:	7c ad       	ldd	r23, Y+60	; 0x3c
    3014:	8d ad       	ldd	r24, Y+61	; 0x3d
    3016:	9e ad       	ldd	r25, Y+62	; 0x3e
    3018:	2b ea       	ldi	r18, 0xAB	; 171
    301a:	3a ea       	ldi	r19, 0xAA	; 170
    301c:	4a e2       	ldi	r20, 0x2A	; 42
    301e:	50 e4       	ldi	r21, 0x40	; 64
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	8f ab       	std	Y+55, r24	; 0x37
    302a:	98 af       	std	Y+56, r25	; 0x38
    302c:	a9 af       	std	Y+57, r26	; 0x39
    302e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3030:	6f a9       	ldd	r22, Y+55	; 0x37
    3032:	78 ad       	ldd	r23, Y+56	; 0x38
    3034:	89 ad       	ldd	r24, Y+57	; 0x39
    3036:	9a ad       	ldd	r25, Y+58	; 0x3a
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	1c f4       	brge	.+6      	; 0x304e <CLCD_voidInit+0x1f4>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8e ab       	std	Y+54, r24	; 0x36
    304c:	91 c0       	rjmp	.+290    	; 0x3170 <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    304e:	6f a9       	ldd	r22, Y+55	; 0x37
    3050:	78 ad       	ldd	r23, Y+56	; 0x38
    3052:	89 ad       	ldd	r24, Y+57	; 0x39
    3054:	9a ad       	ldd	r25, Y+58	; 0x3a
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	53 e4       	ldi	r21, 0x43	; 67
    305e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	0c f0       	brlt	.+2      	; 0x3068 <CLCD_voidInit+0x20e>
    3066:	7b c0       	rjmp	.+246    	; 0x315e <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    3068:	6b ad       	ldd	r22, Y+59	; 0x3b
    306a:	7c ad       	ldd	r23, Y+60	; 0x3c
    306c:	8d ad       	ldd	r24, Y+61	; 0x3d
    306e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a e7       	ldi	r20, 0x7A	; 122
    3076:	54 e4       	ldi	r21, 0x44	; 68
    3078:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8a ab       	std	Y+50, r24	; 0x32
    3082:	9b ab       	std	Y+51, r25	; 0x33
    3084:	ac ab       	std	Y+52, r26	; 0x34
    3086:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	6a a9       	ldd	r22, Y+50	; 0x32
    308a:	7b a9       	ldd	r23, Y+51	; 0x33
    308c:	8c a9       	ldd	r24, Y+52	; 0x34
    308e:	9d a9       	ldd	r25, Y+53	; 0x35
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a ef       	ldi	r20, 0xFA	; 250
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	8e a7       	std	Y+46, r24	; 0x2e
    30a2:	9f a7       	std	Y+47, r25	; 0x2f
    30a4:	a8 ab       	std	Y+48, r26	; 0x30
    30a6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    30a8:	6e a5       	ldd	r22, Y+46	; 0x2e
    30aa:	7f a5       	ldd	r23, Y+47	; 0x2f
    30ac:	88 a9       	ldd	r24, Y+48	; 0x30
    30ae:	99 a9       	ldd	r25, Y+49	; 0x31
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30bc:	88 23       	and	r24, r24
    30be:	2c f4       	brge	.+10     	; 0x30ca <CLCD_voidInit+0x270>
		__ticks = 1;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9d a7       	std	Y+45, r25	; 0x2d
    30c6:	8c a7       	std	Y+44, r24	; 0x2c
    30c8:	3f c0       	rjmp	.+126    	; 0x3148 <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    30ca:	6e a5       	ldd	r22, Y+46	; 0x2e
    30cc:	7f a5       	ldd	r23, Y+47	; 0x2f
    30ce:	88 a9       	ldd	r24, Y+48	; 0x30
    30d0:	99 a9       	ldd	r25, Y+49	; 0x31
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	4c f5       	brge	.+82     	; 0x3134 <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e2:	6a a9       	ldd	r22, Y+50	; 0x32
    30e4:	7b a9       	ldd	r23, Y+51	; 0x33
    30e6:	8c a9       	ldd	r24, Y+52	; 0x34
    30e8:	9d a9       	ldd	r25, Y+53	; 0x35
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9d a7       	std	Y+45, r25	; 0x2d
    3108:	8c a7       	std	Y+44, r24	; 0x2c
    310a:	0f c0       	rjmp	.+30     	; 0x312a <CLCD_voidInit+0x2d0>
    310c:	88 ec       	ldi	r24, 0xC8	; 200
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9b a7       	std	Y+43, r25	; 0x2b
    3112:	8a a7       	std	Y+42, r24	; 0x2a
    3114:	8a a5       	ldd	r24, Y+42	; 0x2a
    3116:	9b a5       	ldd	r25, Y+43	; 0x2b
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <CLCD_voidInit+0x2be>
    311c:	9b a7       	std	Y+43, r25	; 0x2b
    311e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8c a5       	ldd	r24, Y+44	; 0x2c
    3122:	9d a5       	ldd	r25, Y+45	; 0x2d
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9d a7       	std	Y+45, r25	; 0x2d
    3128:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8c a5       	ldd	r24, Y+44	; 0x2c
    312c:	9d a5       	ldd	r25, Y+45	; 0x2d
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <CLCD_voidInit+0x2b2>
    3132:	24 c0       	rjmp	.+72     	; 0x317c <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	6e a5       	ldd	r22, Y+46	; 0x2e
    3136:	7f a5       	ldd	r23, Y+47	; 0x2f
    3138:	88 a9       	ldd	r24, Y+48	; 0x30
    313a:	99 a9       	ldd	r25, Y+49	; 0x31
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9d a7       	std	Y+45, r25	; 0x2d
    3146:	8c a7       	std	Y+44, r24	; 0x2c
    3148:	8c a5       	ldd	r24, Y+44	; 0x2c
    314a:	9d a5       	ldd	r25, Y+45	; 0x2d
    314c:	99 a7       	std	Y+41, r25	; 0x29
    314e:	88 a7       	std	Y+40, r24	; 0x28
    3150:	88 a5       	ldd	r24, Y+40	; 0x28
    3152:	99 a5       	ldd	r25, Y+41	; 0x29
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <CLCD_voidInit+0x2fa>
    3158:	99 a7       	std	Y+41, r25	; 0x29
    315a:	88 a7       	std	Y+40, r24	; 0x28
    315c:	0f c0       	rjmp	.+30     	; 0x317c <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    315e:	6f a9       	ldd	r22, Y+55	; 0x37
    3160:	78 ad       	ldd	r23, Y+56	; 0x38
    3162:	89 ad       	ldd	r24, Y+57	; 0x39
    3164:	9a ad       	ldd	r25, Y+58	; 0x3a
    3166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	8e ab       	std	Y+54, r24	; 0x36
    3170:	8e a9       	ldd	r24, Y+54	; 0x36
    3172:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3174:	8f a1       	ldd	r24, Y+39	; 0x27
    3176:	8a 95       	dec	r24
    3178:	f1 f7       	brne	.-4      	; 0x3176 <CLCD_voidInit+0x31c>
    317a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);

	//Display on/off
	CLCD_voidSendCommand(0b00001100);
    317c:	8c e0       	ldi	r24, 0x0C	; 12
    317e:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	a8 e4       	ldi	r26, 0x48	; 72
    3188:	b2 e4       	ldi	r27, 0x42	; 66
    318a:	8b a3       	std	Y+35, r24	; 0x23
    318c:	9c a3       	std	Y+36, r25	; 0x24
    318e:	ad a3       	std	Y+37, r26	; 0x25
    3190:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3192:	6b a1       	ldd	r22, Y+35	; 0x23
    3194:	7c a1       	ldd	r23, Y+36	; 0x24
    3196:	8d a1       	ldd	r24, Y+37	; 0x25
    3198:	9e a1       	ldd	r25, Y+38	; 0x26
    319a:	2b ea       	ldi	r18, 0xAB	; 171
    319c:	3a ea       	ldi	r19, 0xAA	; 170
    319e:	4a e2       	ldi	r20, 0x2A	; 42
    31a0:	50 e4       	ldi	r21, 0x40	; 64
    31a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	8f 8f       	std	Y+31, r24	; 0x1f
    31ac:	98 a3       	std	Y+32, r25	; 0x20
    31ae:	a9 a3       	std	Y+33, r26	; 0x21
    31b0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    31b2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31b4:	78 a1       	ldd	r23, Y+32	; 0x20
    31b6:	89 a1       	ldd	r24, Y+33	; 0x21
    31b8:	9a a1       	ldd	r25, Y+34	; 0x22
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e8       	ldi	r20, 0x80	; 128
    31c0:	5f e3       	ldi	r21, 0x3F	; 63
    31c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c6:	88 23       	and	r24, r24
    31c8:	1c f4       	brge	.+6      	; 0x31d0 <CLCD_voidInit+0x376>
		__ticks = 1;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	8e 8f       	std	Y+30, r24	; 0x1e
    31ce:	91 c0       	rjmp	.+290    	; 0x32f2 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    31d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31d2:	78 a1       	ldd	r23, Y+32	; 0x20
    31d4:	89 a1       	ldd	r24, Y+33	; 0x21
    31d6:	9a a1       	ldd	r25, Y+34	; 0x22
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	4f e7       	ldi	r20, 0x7F	; 127
    31de:	53 e4       	ldi	r21, 0x43	; 67
    31e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31e4:	18 16       	cp	r1, r24
    31e6:	0c f0       	brlt	.+2      	; 0x31ea <CLCD_voidInit+0x390>
    31e8:	7b c0       	rjmp	.+246    	; 0x32e0 <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    31ea:	6b a1       	ldd	r22, Y+35	; 0x23
    31ec:	7c a1       	ldd	r23, Y+36	; 0x24
    31ee:	8d a1       	ldd	r24, Y+37	; 0x25
    31f0:	9e a1       	ldd	r25, Y+38	; 0x26
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	4a e7       	ldi	r20, 0x7A	; 122
    31f8:	54 e4       	ldi	r21, 0x44	; 68
    31fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	8a 8f       	std	Y+26, r24	; 0x1a
    3204:	9b 8f       	std	Y+27, r25	; 0x1b
    3206:	ac 8f       	std	Y+28, r26	; 0x1c
    3208:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    320c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    320e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3210:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	4a ef       	ldi	r20, 0xFA	; 250
    3218:	54 e4       	ldi	r21, 0x44	; 68
    321a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	8e 8b       	std	Y+22, r24	; 0x16
    3224:	9f 8b       	std	Y+23, r25	; 0x17
    3226:	a8 8f       	std	Y+24, r26	; 0x18
    3228:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    322a:	6e 89       	ldd	r22, Y+22	; 0x16
    322c:	7f 89       	ldd	r23, Y+23	; 0x17
    322e:	88 8d       	ldd	r24, Y+24	; 0x18
    3230:	99 8d       	ldd	r25, Y+25	; 0x19
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e8       	ldi	r20, 0x80	; 128
    3238:	5f e3       	ldi	r21, 0x3F	; 63
    323a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    323e:	88 23       	and	r24, r24
    3240:	2c f4       	brge	.+10     	; 0x324c <CLCD_voidInit+0x3f2>
		__ticks = 1;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	9d 8b       	std	Y+21, r25	; 0x15
    3248:	8c 8b       	std	Y+20, r24	; 0x14
    324a:	3f c0       	rjmp	.+126    	; 0x32ca <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    324c:	6e 89       	ldd	r22, Y+22	; 0x16
    324e:	7f 89       	ldd	r23, Y+23	; 0x17
    3250:	88 8d       	ldd	r24, Y+24	; 0x18
    3252:	99 8d       	ldd	r25, Y+25	; 0x19
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	3f ef       	ldi	r19, 0xFF	; 255
    3258:	4f e7       	ldi	r20, 0x7F	; 127
    325a:	57 e4       	ldi	r21, 0x47	; 71
    325c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3260:	18 16       	cp	r1, r24
    3262:	4c f5       	brge	.+82     	; 0x32b6 <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3264:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3266:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3268:	8c 8d       	ldd	r24, Y+28	; 0x1c
    326a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	40 e2       	ldi	r20, 0x20	; 32
    3272:	51 e4       	ldi	r21, 0x41	; 65
    3274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	bc 01       	movw	r22, r24
    327e:	cd 01       	movw	r24, r26
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9d 8b       	std	Y+21, r25	; 0x15
    328a:	8c 8b       	std	Y+20, r24	; 0x14
    328c:	0f c0       	rjmp	.+30     	; 0x32ac <CLCD_voidInit+0x452>
    328e:	88 ec       	ldi	r24, 0xC8	; 200
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	9b 8b       	std	Y+19, r25	; 0x13
    3294:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3296:	8a 89       	ldd	r24, Y+18	; 0x12
    3298:	9b 89       	ldd	r25, Y+19	; 0x13
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	f1 f7       	brne	.-4      	; 0x329a <CLCD_voidInit+0x440>
    329e:	9b 8b       	std	Y+19, r25	; 0x13
    32a0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a2:	8c 89       	ldd	r24, Y+20	; 0x14
    32a4:	9d 89       	ldd	r25, Y+21	; 0x15
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	9d 8b       	std	Y+21, r25	; 0x15
    32aa:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ac:	8c 89       	ldd	r24, Y+20	; 0x14
    32ae:	9d 89       	ldd	r25, Y+21	; 0x15
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	69 f7       	brne	.-38     	; 0x328e <CLCD_voidInit+0x434>
    32b4:	24 c0       	rjmp	.+72     	; 0x32fe <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b6:	6e 89       	ldd	r22, Y+22	; 0x16
    32b8:	7f 89       	ldd	r23, Y+23	; 0x17
    32ba:	88 8d       	ldd	r24, Y+24	; 0x18
    32bc:	99 8d       	ldd	r25, Y+25	; 0x19
    32be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	9d 8b       	std	Y+21, r25	; 0x15
    32c8:	8c 8b       	std	Y+20, r24	; 0x14
    32ca:	8c 89       	ldd	r24, Y+20	; 0x14
    32cc:	9d 89       	ldd	r25, Y+21	; 0x15
    32ce:	99 8b       	std	Y+17, r25	; 0x11
    32d0:	88 8b       	std	Y+16, r24	; 0x10
    32d2:	88 89       	ldd	r24, Y+16	; 0x10
    32d4:	99 89       	ldd	r25, Y+17	; 0x11
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <CLCD_voidInit+0x47c>
    32da:	99 8b       	std	Y+17, r25	; 0x11
    32dc:	88 8b       	std	Y+16, r24	; 0x10
    32de:	0f c0       	rjmp	.+30     	; 0x32fe <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    32e2:	78 a1       	ldd	r23, Y+32	; 0x20
    32e4:	89 a1       	ldd	r24, Y+33	; 0x21
    32e6:	9a a1       	ldd	r25, Y+34	; 0x22
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	8e 8f       	std	Y+30, r24	; 0x1e
    32f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32f4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f8:	8a 95       	dec	r24
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <CLCD_voidInit+0x49e>
    32fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);

	//DispalyClear
	CLCD_voidSendCommand(0x01);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e4       	ldi	r27, 0x40	; 64
    330c:	8b 87       	std	Y+11, r24	; 0x0b
    330e:	9c 87       	std	Y+12, r25	; 0x0c
    3310:	ad 87       	std	Y+13, r26	; 0x0d
    3312:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3314:	6b 85       	ldd	r22, Y+11	; 0x0b
    3316:	7c 85       	ldd	r23, Y+12	; 0x0c
    3318:	8d 85       	ldd	r24, Y+13	; 0x0d
    331a:	9e 85       	ldd	r25, Y+14	; 0x0e
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	4a ef       	ldi	r20, 0xFA	; 250
    3322:	54 e4       	ldi	r21, 0x44	; 68
    3324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	8f 83       	std	Y+7, r24	; 0x07
    332e:	98 87       	std	Y+8, r25	; 0x08
    3330:	a9 87       	std	Y+9, r26	; 0x09
    3332:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3334:	6f 81       	ldd	r22, Y+7	; 0x07
    3336:	78 85       	ldd	r23, Y+8	; 0x08
    3338:	89 85       	ldd	r24, Y+9	; 0x09
    333a:	9a 85       	ldd	r25, Y+10	; 0x0a
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	2c f4       	brge	.+10     	; 0x3356 <CLCD_voidInit+0x4fc>
		__ticks = 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9e 83       	std	Y+6, r25	; 0x06
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	3f c0       	rjmp	.+126    	; 0x33d4 <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    3356:	6f 81       	ldd	r22, Y+7	; 0x07
    3358:	78 85       	ldd	r23, Y+8	; 0x08
    335a:	89 85       	ldd	r24, Y+9	; 0x09
    335c:	9a 85       	ldd	r25, Y+10	; 0x0a
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	3f ef       	ldi	r19, 0xFF	; 255
    3362:	4f e7       	ldi	r20, 0x7F	; 127
    3364:	57 e4       	ldi	r21, 0x47	; 71
    3366:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    336a:	18 16       	cp	r1, r24
    336c:	4c f5       	brge	.+82     	; 0x33c0 <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3370:	7c 85       	ldd	r23, Y+12	; 0x0c
    3372:	8d 85       	ldd	r24, Y+13	; 0x0d
    3374:	9e 85       	ldd	r25, Y+14	; 0x0e
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e2       	ldi	r20, 0x20	; 32
    337c:	51 e4       	ldi	r21, 0x41	; 65
    337e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
    3396:	0f c0       	rjmp	.+30     	; 0x33b6 <CLCD_voidInit+0x55c>
    3398:	88 ec       	ldi	r24, 0xC8	; 200
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9c 83       	std	Y+4, r25	; 0x04
    339e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33a0:	8b 81       	ldd	r24, Y+3	; 0x03
    33a2:	9c 81       	ldd	r25, Y+4	; 0x04
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <CLCD_voidInit+0x54a>
    33a8:	9c 83       	std	Y+4, r25	; 0x04
    33aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ac:	8d 81       	ldd	r24, Y+5	; 0x05
    33ae:	9e 81       	ldd	r25, Y+6	; 0x06
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	69 f7       	brne	.-38     	; 0x3398 <CLCD_voidInit+0x53e>
    33be:	14 c0       	rjmp	.+40     	; 0x33e8 <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c0:	6f 81       	ldd	r22, Y+7	; 0x07
    33c2:	78 85       	ldd	r23, Y+8	; 0x08
    33c4:	89 85       	ldd	r24, Y+9	; 0x09
    33c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	9e 83       	std	Y+6, r25	; 0x06
    33d2:	8d 83       	std	Y+5, r24	; 0x05
    33d4:	8d 81       	ldd	r24, Y+5	; 0x05
    33d6:	9e 81       	ldd	r25, Y+6	; 0x06
    33d8:	9a 83       	std	Y+2, r25	; 0x02
    33da:	89 83       	std	Y+1, r24	; 0x01
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	9a 81       	ldd	r25, Y+2	; 0x02
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <CLCD_voidInit+0x586>
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	//Entry Mode Set
	CLCD_voidSendCommand(0b00000110);
    33e8:	86 e0       	ldi	r24, 0x06	; 6
    33ea:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>

}
    33ee:	c4 5b       	subi	r28, 0xB4	; 180
    33f0:	df 4f       	sbci	r29, 0xFF	; 255
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	cf 91       	pop	r28
    33fe:	df 91       	pop	r29
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	08 95       	ret

00003406 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command){
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	a7 97       	sbiw	r28, 0x27	; 39
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	8f a3       	std	Y+39, r24	; 0x27

	//Rs = 0 -> command
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_LOW);
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>

	//RW = 0-> write
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
	//Send command
	DIO_voidSetPortValue(CLCD_DATA_PORT, Copy_u8Command);
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	6f a1       	ldd	r22, Y+39	; 0x27
    3434:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
	//enable sequence
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_HIGH);
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	62 e0       	ldi	r22, 0x02	; 2
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	a0 e8       	ldi	r26, 0x80	; 128
    3448:	bf e3       	ldi	r27, 0x3F	; 63
    344a:	8b a3       	std	Y+35, r24	; 0x23
    344c:	9c a3       	std	Y+36, r25	; 0x24
    344e:	ad a3       	std	Y+37, r26	; 0x25
    3450:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3452:	6b a1       	ldd	r22, Y+35	; 0x23
    3454:	7c a1       	ldd	r23, Y+36	; 0x24
    3456:	8d a1       	ldd	r24, Y+37	; 0x25
    3458:	9e a1       	ldd	r25, Y+38	; 0x26
    345a:	2b ea       	ldi	r18, 0xAB	; 171
    345c:	3a ea       	ldi	r19, 0xAA	; 170
    345e:	4a e2       	ldi	r20, 0x2A	; 42
    3460:	50 e4       	ldi	r21, 0x40	; 64
    3462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	8f 8f       	std	Y+31, r24	; 0x1f
    346c:	98 a3       	std	Y+32, r25	; 0x20
    346e:	a9 a3       	std	Y+33, r26	; 0x21
    3470:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3472:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3474:	78 a1       	ldd	r23, Y+32	; 0x20
    3476:	89 a1       	ldd	r24, Y+33	; 0x21
    3478:	9a a1       	ldd	r25, Y+34	; 0x22
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e8       	ldi	r20, 0x80	; 128
    3480:	5f e3       	ldi	r21, 0x3F	; 63
    3482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3486:	88 23       	and	r24, r24
    3488:	1c f4       	brge	.+6      	; 0x3490 <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	8e 8f       	std	Y+30, r24	; 0x1e
    348e:	91 c0       	rjmp	.+290    	; 0x35b2 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    3490:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3492:	78 a1       	ldd	r23, Y+32	; 0x20
    3494:	89 a1       	ldd	r24, Y+33	; 0x21
    3496:	9a a1       	ldd	r25, Y+34	; 0x22
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	4f e7       	ldi	r20, 0x7F	; 127
    349e:	53 e4       	ldi	r21, 0x43	; 67
    34a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34a4:	18 16       	cp	r1, r24
    34a6:	0c f0       	brlt	.+2      	; 0x34aa <CLCD_voidSendCommand+0xa4>
    34a8:	7b c0       	rjmp	.+246    	; 0x35a0 <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    34aa:	6b a1       	ldd	r22, Y+35	; 0x23
    34ac:	7c a1       	ldd	r23, Y+36	; 0x24
    34ae:	8d a1       	ldd	r24, Y+37	; 0x25
    34b0:	9e a1       	ldd	r25, Y+38	; 0x26
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	4a e7       	ldi	r20, 0x7A	; 122
    34b8:	54 e4       	ldi	r21, 0x44	; 68
    34ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	8a 8f       	std	Y+26, r24	; 0x1a
    34c4:	9b 8f       	std	Y+27, r25	; 0x1b
    34c6:	ac 8f       	std	Y+28, r26	; 0x1c
    34c8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34cc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    34ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	4a ef       	ldi	r20, 0xFA	; 250
    34d8:	54 e4       	ldi	r21, 0x44	; 68
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	8e 8b       	std	Y+22, r24	; 0x16
    34e4:	9f 8b       	std	Y+23, r25	; 0x17
    34e6:	a8 8f       	std	Y+24, r26	; 0x18
    34e8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    34ea:	6e 89       	ldd	r22, Y+22	; 0x16
    34ec:	7f 89       	ldd	r23, Y+23	; 0x17
    34ee:	88 8d       	ldd	r24, Y+24	; 0x18
    34f0:	99 8d       	ldd	r25, Y+25	; 0x19
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e8       	ldi	r20, 0x80	; 128
    34f8:	5f e3       	ldi	r21, 0x3F	; 63
    34fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fe:	88 23       	and	r24, r24
    3500:	2c f4       	brge	.+10     	; 0x350c <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9d 8b       	std	Y+21, r25	; 0x15
    3508:	8c 8b       	std	Y+20, r24	; 0x14
    350a:	3f c0       	rjmp	.+126    	; 0x358a <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    350c:	6e 89       	ldd	r22, Y+22	; 0x16
    350e:	7f 89       	ldd	r23, Y+23	; 0x17
    3510:	88 8d       	ldd	r24, Y+24	; 0x18
    3512:	99 8d       	ldd	r25, Y+25	; 0x19
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	3f ef       	ldi	r19, 0xFF	; 255
    3518:	4f e7       	ldi	r20, 0x7F	; 127
    351a:	57 e4       	ldi	r21, 0x47	; 71
    351c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3520:	18 16       	cp	r1, r24
    3522:	4c f5       	brge	.+82     	; 0x3576 <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3524:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3526:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3528:	8c 8d       	ldd	r24, Y+28	; 0x1c
    352a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e2       	ldi	r20, 0x20	; 32
    3532:	51 e4       	ldi	r21, 0x41	; 65
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	bc 01       	movw	r22, r24
    353e:	cd 01       	movw	r24, r26
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9d 8b       	std	Y+21, r25	; 0x15
    354a:	8c 8b       	std	Y+20, r24	; 0x14
    354c:	0f c0       	rjmp	.+30     	; 0x356c <CLCD_voidSendCommand+0x166>
    354e:	88 ec       	ldi	r24, 0xC8	; 200
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	9b 8b       	std	Y+19, r25	; 0x13
    3554:	8a 8b       	std	Y+18, r24	; 0x12
    3556:	8a 89       	ldd	r24, Y+18	; 0x12
    3558:	9b 89       	ldd	r25, Y+19	; 0x13
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	f1 f7       	brne	.-4      	; 0x355a <CLCD_voidSendCommand+0x154>
    355e:	9b 8b       	std	Y+19, r25	; 0x13
    3560:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3562:	8c 89       	ldd	r24, Y+20	; 0x14
    3564:	9d 89       	ldd	r25, Y+21	; 0x15
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	9d 8b       	std	Y+21, r25	; 0x15
    356a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356c:	8c 89       	ldd	r24, Y+20	; 0x14
    356e:	9d 89       	ldd	r25, Y+21	; 0x15
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	69 f7       	brne	.-38     	; 0x354e <CLCD_voidSendCommand+0x148>
    3574:	24 c0       	rjmp	.+72     	; 0x35be <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3576:	6e 89       	ldd	r22, Y+22	; 0x16
    3578:	7f 89       	ldd	r23, Y+23	; 0x17
    357a:	88 8d       	ldd	r24, Y+24	; 0x18
    357c:	99 8d       	ldd	r25, Y+25	; 0x19
    357e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	9d 8b       	std	Y+21, r25	; 0x15
    3588:	8c 8b       	std	Y+20, r24	; 0x14
    358a:	8c 89       	ldd	r24, Y+20	; 0x14
    358c:	9d 89       	ldd	r25, Y+21	; 0x15
    358e:	99 8b       	std	Y+17, r25	; 0x11
    3590:	88 8b       	std	Y+16, r24	; 0x10
    3592:	88 89       	ldd	r24, Y+16	; 0x10
    3594:	99 89       	ldd	r25, Y+17	; 0x11
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	f1 f7       	brne	.-4      	; 0x3596 <CLCD_voidSendCommand+0x190>
    359a:	99 8b       	std	Y+17, r25	; 0x11
    359c:	88 8b       	std	Y+16, r24	; 0x10
    359e:	0f c0       	rjmp	.+30     	; 0x35be <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    35a2:	78 a1       	ldd	r23, Y+32	; 0x20
    35a4:	89 a1       	ldd	r24, Y+33	; 0x21
    35a6:	9a a1       	ldd	r25, Y+34	; 0x22
    35a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	8e 8f       	std	Y+30, r24	; 0x1e
    35b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35b4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b8:	8a 95       	dec	r24
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <CLCD_voidSendCommand+0x1b2>
    35bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_LOW);
    35be:	82 e0       	ldi	r24, 0x02	; 2
    35c0:	62 e0       	ldi	r22, 0x02	; 2
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e0       	ldi	r26, 0x00	; 0
    35ce:	b0 e4       	ldi	r27, 0x40	; 64
    35d0:	8b 87       	std	Y+11, r24	; 0x0b
    35d2:	9c 87       	std	Y+12, r25	; 0x0c
    35d4:	ad 87       	std	Y+13, r26	; 0x0d
    35d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35da:	7c 85       	ldd	r23, Y+12	; 0x0c
    35dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35de:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	4a ef       	ldi	r20, 0xFA	; 250
    35e6:	54 e4       	ldi	r21, 0x44	; 68
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	8f 83       	std	Y+7, r24	; 0x07
    35f2:	98 87       	std	Y+8, r25	; 0x08
    35f4:	a9 87       	std	Y+9, r26	; 0x09
    35f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35f8:	6f 81       	ldd	r22, Y+7	; 0x07
    35fa:	78 85       	ldd	r23, Y+8	; 0x08
    35fc:	89 85       	ldd	r24, Y+9	; 0x09
    35fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <CLCD_voidSendCommand+0x214>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <CLCD_voidSendCommand+0x292>
	else if (__tmp > 65535)
    361a:	6f 81       	ldd	r22, Y+7	; 0x07
    361c:	78 85       	ldd	r23, Y+8	; 0x08
    361e:	89 85       	ldd	r24, Y+9	; 0x09
    3620:	9a 85       	ldd	r25, Y+10	; 0x0a
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	3f ef       	ldi	r19, 0xFF	; 255
    3626:	4f e7       	ldi	r20, 0x7F	; 127
    3628:	57 e4       	ldi	r21, 0x47	; 71
    362a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    362e:	18 16       	cp	r1, r24
    3630:	4c f5       	brge	.+82     	; 0x3684 <CLCD_voidSendCommand+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	6b 85       	ldd	r22, Y+11	; 0x0b
    3634:	7c 85       	ldd	r23, Y+12	; 0x0c
    3636:	8d 85       	ldd	r24, Y+13	; 0x0d
    3638:	9e 85       	ldd	r25, Y+14	; 0x0e
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e2       	ldi	r20, 0x20	; 32
    3640:	51 e4       	ldi	r21, 0x41	; 65
    3642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	0f c0       	rjmp	.+30     	; 0x367a <CLCD_voidSendCommand+0x274>
    365c:	88 ec       	ldi	r24, 0xC8	; 200
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	9c 83       	std	Y+4, r25	; 0x04
    3662:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3664:	8b 81       	ldd	r24, Y+3	; 0x03
    3666:	9c 81       	ldd	r25, Y+4	; 0x04
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <CLCD_voidSendCommand+0x262>
    366c:	9c 83       	std	Y+4, r25	; 0x04
    366e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3670:	8d 81       	ldd	r24, Y+5	; 0x05
    3672:	9e 81       	ldd	r25, Y+6	; 0x06
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	69 f7       	brne	.-38     	; 0x365c <CLCD_voidSendCommand+0x256>
    3682:	14 c0       	rjmp	.+40     	; 0x36ac <CLCD_voidSendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	6f 81       	ldd	r22, Y+7	; 0x07
    3686:	78 85       	ldd	r23, Y+8	; 0x08
    3688:	89 85       	ldd	r24, Y+9	; 0x09
    368a:	9a 85       	ldd	r25, Y+10	; 0x0a
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <CLCD_voidSendCommand+0x29e>
    36a8:	9a 83       	std	Y+2, r25	; 0x02
    36aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    36ac:	a7 96       	adiw	r28, 0x27	; 39
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	cf 91       	pop	r28
    36ba:	df 91       	pop	r29
    36bc:	08 95       	ret

000036be <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	69 97       	sbiw	r28, 0x19	; 25
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	89 8f       	std	Y+25, r24	; 0x19

	//Rs = 1 -> data
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_HIGH);
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	60 e0       	ldi	r22, 0x00	; 0
    36d8:	41 e0       	ldi	r20, 0x01	; 1
    36da:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>

	//RW = 0-> write
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	40 e0       	ldi	r20, 0x00	; 0
    36e4:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
	//Send data
	DIO_voidSetPortValue(CLCD_DATA_PORT, Copy_u8Data);
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	69 8d       	ldd	r22, Y+25	; 0x19
    36ec:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <DIO_voidSetPortValue>
	//enable sequence
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_HIGH);
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	62 e0       	ldi	r22, 0x02	; 2
    36f4:	41 e0       	ldi	r20, 0x01	; 1
    36f6:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e8       	ldi	r26, 0x80	; 128
    3700:	bf e3       	ldi	r27, 0x3F	; 63
    3702:	8d 8b       	std	Y+21, r24	; 0x15
    3704:	9e 8b       	std	Y+22, r25	; 0x16
    3706:	af 8b       	std	Y+23, r26	; 0x17
    3708:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    370a:	6d 89       	ldd	r22, Y+21	; 0x15
    370c:	7e 89       	ldd	r23, Y+22	; 0x16
    370e:	8f 89       	ldd	r24, Y+23	; 0x17
    3710:	98 8d       	ldd	r25, Y+24	; 0x18
    3712:	2b ea       	ldi	r18, 0xAB	; 171
    3714:	3a ea       	ldi	r19, 0xAA	; 170
    3716:	4a e2       	ldi	r20, 0x2A	; 42
    3718:	50 e4       	ldi	r21, 0x40	; 64
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	89 8b       	std	Y+17, r24	; 0x11
    3724:	9a 8b       	std	Y+18, r25	; 0x12
    3726:	ab 8b       	std	Y+19, r26	; 0x13
    3728:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    372a:	69 89       	ldd	r22, Y+17	; 0x11
    372c:	7a 89       	ldd	r23, Y+18	; 0x12
    372e:	8b 89       	ldd	r24, Y+19	; 0x13
    3730:	9c 89       	ldd	r25, Y+20	; 0x14
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	1c f4       	brge	.+6      	; 0x3748 <CLCD_voidSendData+0x8a>
		__ticks = 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	88 8b       	std	Y+16, r24	; 0x10
    3746:	91 c0       	rjmp	.+290    	; 0x386a <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    3748:	69 89       	ldd	r22, Y+17	; 0x11
    374a:	7a 89       	ldd	r23, Y+18	; 0x12
    374c:	8b 89       	ldd	r24, Y+19	; 0x13
    374e:	9c 89       	ldd	r25, Y+20	; 0x14
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	4f e7       	ldi	r20, 0x7F	; 127
    3756:	53 e4       	ldi	r21, 0x43	; 67
    3758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    375c:	18 16       	cp	r1, r24
    375e:	0c f0       	brlt	.+2      	; 0x3762 <CLCD_voidSendData+0xa4>
    3760:	7b c0       	rjmp	.+246    	; 0x3858 <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3762:	6d 89       	ldd	r22, Y+21	; 0x15
    3764:	7e 89       	ldd	r23, Y+22	; 0x16
    3766:	8f 89       	ldd	r24, Y+23	; 0x17
    3768:	98 8d       	ldd	r25, Y+24	; 0x18
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	4a e7       	ldi	r20, 0x7A	; 122
    3770:	54 e4       	ldi	r21, 0x44	; 68
    3772:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	8c 87       	std	Y+12, r24	; 0x0c
    377c:	9d 87       	std	Y+13, r25	; 0x0d
    377e:	ae 87       	std	Y+14, r26	; 0x0e
    3780:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3782:	6c 85       	ldd	r22, Y+12	; 0x0c
    3784:	7d 85       	ldd	r23, Y+13	; 0x0d
    3786:	8e 85       	ldd	r24, Y+14	; 0x0e
    3788:	9f 85       	ldd	r25, Y+15	; 0x0f
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	4a ef       	ldi	r20, 0xFA	; 250
    3790:	54 e4       	ldi	r21, 0x44	; 68
    3792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	88 87       	std	Y+8, r24	; 0x08
    379c:	99 87       	std	Y+9, r25	; 0x09
    379e:	aa 87       	std	Y+10, r26	; 0x0a
    37a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    37a2:	68 85       	ldd	r22, Y+8	; 0x08
    37a4:	79 85       	ldd	r23, Y+9	; 0x09
    37a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    37a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e8       	ldi	r20, 0x80	; 128
    37b0:	5f e3       	ldi	r21, 0x3F	; 63
    37b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b6:	88 23       	and	r24, r24
    37b8:	2c f4       	brge	.+10     	; 0x37c4 <CLCD_voidSendData+0x106>
		__ticks = 1;
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	9f 83       	std	Y+7, r25	; 0x07
    37c0:	8e 83       	std	Y+6, r24	; 0x06
    37c2:	3f c0       	rjmp	.+126    	; 0x3842 <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    37c4:	68 85       	ldd	r22, Y+8	; 0x08
    37c6:	79 85       	ldd	r23, Y+9	; 0x09
    37c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    37ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	3f ef       	ldi	r19, 0xFF	; 255
    37d0:	4f e7       	ldi	r20, 0x7F	; 127
    37d2:	57 e4       	ldi	r21, 0x47	; 71
    37d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d8:	18 16       	cp	r1, r24
    37da:	4c f5       	brge	.+82     	; 0x382e <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    37de:	7d 85       	ldd	r23, Y+13	; 0x0d
    37e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e2       	ldi	r20, 0x20	; 32
    37ea:	51 e4       	ldi	r21, 0x41	; 65
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	9f 83       	std	Y+7, r25	; 0x07
    3802:	8e 83       	std	Y+6, r24	; 0x06
    3804:	0f c0       	rjmp	.+30     	; 0x3824 <CLCD_voidSendData+0x166>
    3806:	88 ec       	ldi	r24, 0xC8	; 200
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	9d 83       	std	Y+5, r25	; 0x05
    380c:	8c 83       	std	Y+4, r24	; 0x04
    380e:	8c 81       	ldd	r24, Y+4	; 0x04
    3810:	9d 81       	ldd	r25, Y+5	; 0x05
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	f1 f7       	brne	.-4      	; 0x3812 <CLCD_voidSendData+0x154>
    3816:	9d 83       	std	Y+5, r25	; 0x05
    3818:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    381a:	8e 81       	ldd	r24, Y+6	; 0x06
    381c:	9f 81       	ldd	r25, Y+7	; 0x07
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	9f 83       	std	Y+7, r25	; 0x07
    3822:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3824:	8e 81       	ldd	r24, Y+6	; 0x06
    3826:	9f 81       	ldd	r25, Y+7	; 0x07
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	69 f7       	brne	.-38     	; 0x3806 <CLCD_voidSendData+0x148>
    382c:	24 c0       	rjmp	.+72     	; 0x3876 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382e:	68 85       	ldd	r22, Y+8	; 0x08
    3830:	79 85       	ldd	r23, Y+9	; 0x09
    3832:	8a 85       	ldd	r24, Y+10	; 0x0a
    3834:	9b 85       	ldd	r25, Y+11	; 0x0b
    3836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	9f 83       	std	Y+7, r25	; 0x07
    3840:	8e 83       	std	Y+6, r24	; 0x06
    3842:	8e 81       	ldd	r24, Y+6	; 0x06
    3844:	9f 81       	ldd	r25, Y+7	; 0x07
    3846:	9b 83       	std	Y+3, r25	; 0x03
    3848:	8a 83       	std	Y+2, r24	; 0x02
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	9b 81       	ldd	r25, Y+3	; 0x03
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <CLCD_voidSendData+0x190>
    3852:	9b 83       	std	Y+3, r25	; 0x03
    3854:	8a 83       	std	Y+2, r24	; 0x02
    3856:	0f c0       	rjmp	.+30     	; 0x3876 <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3858:	69 89       	ldd	r22, Y+17	; 0x11
    385a:	7a 89       	ldd	r23, Y+18	; 0x12
    385c:	8b 89       	ldd	r24, Y+19	; 0x13
    385e:	9c 89       	ldd	r25, Y+20	; 0x14
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	88 8b       	std	Y+16, r24	; 0x10
    386a:	88 89       	ldd	r24, Y+16	; 0x10
    386c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	8a 95       	dec	r24
    3872:	f1 f7       	brne	.-4      	; 0x3870 <CLCD_voidSendData+0x1b2>
    3874:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_LOW);
    3876:	82 e0       	ldi	r24, 0x02	; 2
    3878:	62 e0       	ldi	r22, 0x02	; 2
    387a:	40 e0       	ldi	r20, 0x00	; 0
    387c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_voidSetPinValue>

}
    3880:	69 96       	adiw	r28, 0x19	; 25
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <CLCD_voidCreateNewChar>:



void CLCD_voidCreateNewChar(u8 Copy_u8PatternLocation, u8 * Copy_pu8ExtraChar){
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	00 d0       	rcall	.+0      	; 0x3898 <CLCD_voidCreateNewChar+0x6>
    3898:	00 d0       	rcall	.+0      	; 0x389a <CLCD_voidCreateNewChar+0x8>
    389a:	0f 92       	push	r0
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	8b 83       	std	Y+3, r24	; 0x03
    38a2:	7d 83       	std	Y+5, r23	; 0x05
    38a4:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_u8PatternLocation = 64 + Copy_u8PatternLocation * 8;
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	88 2f       	mov	r24, r24
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	08 96       	adiw	r24, 0x08	; 8
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8PatternLocation);
    38bc:	8a 81       	ldd	r24, Y+2	; 0x02
    38be:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>

	for(u8 i = 0; i<8 ; i++){
    38c2:	19 82       	std	Y+1, r1	; 0x01
    38c4:	0e c0       	rjmp	.+28     	; 0x38e2 <CLCD_voidCreateNewChar+0x50>

		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	28 2f       	mov	r18, r24
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	8c 81       	ldd	r24, Y+4	; 0x04
    38ce:	9d 81       	ldd	r25, Y+5	; 0x05
    38d0:	fc 01       	movw	r30, r24
    38d2:	e2 0f       	add	r30, r18
    38d4:	f3 1f       	adc	r31, r19
    38d6:	80 81       	ld	r24, Z
    38d8:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
void CLCD_voidCreateNewChar(u8 Copy_u8PatternLocation, u8 * Copy_pu8ExtraChar){

	u8 Local_u8PatternLocation = 64 + Copy_u8PatternLocation * 8;
	CLCD_voidSendCommand(Local_u8PatternLocation);

	for(u8 i = 0; i<8 ; i++){
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	89 83       	std	Y+1, r24	; 0x01
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	88 30       	cpi	r24, 0x08	; 8
    38e6:	78 f3       	brcs	.-34     	; 0x38c6 <CLCD_voidCreateNewChar+0x34>

		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}

	CLCD_voidSendData(Copy_u8PatternLocation);
    38e8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ea:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
}
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	cf 91       	pop	r28
    38fa:	df 91       	pop	r29
    38fc:	08 95       	ret

000038fe <CLCD_voidCreateAndDispNew>:

void CLCD_voidCreateAndDispNew(u8 Copy_u8PatternLocation, u8 * Copy_pu8ExtraChar, u8 Copy_u8Row,u8 Copy_u8Col){
    38fe:	df 93       	push	r29
    3900:	cf 93       	push	r28
    3902:	cd b7       	in	r28, 0x3d	; 61
    3904:	de b7       	in	r29, 0x3e	; 62
    3906:	27 97       	sbiw	r28, 0x07	; 7
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	8b 83       	std	Y+3, r24	; 0x03
    3914:	7d 83       	std	Y+5, r23	; 0x05
    3916:	6c 83       	std	Y+4, r22	; 0x04
    3918:	4e 83       	std	Y+6, r20	; 0x06
    391a:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8PatternLocation = 64 + Copy_u8PatternLocation * 8;
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	88 2f       	mov	r24, r24
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	08 96       	adiw	r24, 0x08	; 8
    3924:	88 0f       	add	r24, r24
    3926:	99 1f       	adc	r25, r25
    3928:	88 0f       	add	r24, r24
    392a:	99 1f       	adc	r25, r25
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8PatternLocation);
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>

	for(u8 i = 0; i<8 ; i++){
    3938:	19 82       	std	Y+1, r1	; 0x01
    393a:	0e c0       	rjmp	.+28     	; 0x3958 <CLCD_voidCreateAndDispNew+0x5a>

		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    393c:	89 81       	ldd	r24, Y+1	; 0x01
    393e:	28 2f       	mov	r18, r24
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	8c 81       	ldd	r24, Y+4	; 0x04
    3944:	9d 81       	ldd	r25, Y+5	; 0x05
    3946:	fc 01       	movw	r30, r24
    3948:	e2 0f       	add	r30, r18
    394a:	f3 1f       	adc	r31, r19
    394c:	80 81       	ld	r24, Z
    394e:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
void CLCD_voidCreateAndDispNew(u8 Copy_u8PatternLocation, u8 * Copy_pu8ExtraChar, u8 Copy_u8Row,u8 Copy_u8Col){

	u8 Local_u8PatternLocation = 64 + Copy_u8PatternLocation * 8;
	CLCD_voidSendCommand(Local_u8PatternLocation);

	for(u8 i = 0; i<8 ; i++){
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	8f 5f       	subi	r24, 0xFF	; 255
    3956:	89 83       	std	Y+1, r24	; 0x01
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	88 30       	cpi	r24, 0x08	; 8
    395c:	78 f3       	brcs	.-34     	; 0x393c <CLCD_voidCreateAndDispNew+0x3e>

		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}

	CLCD_voidSendData(Copy_u8PatternLocation);
    395e:	8b 81       	ldd	r24, Y+3	; 0x03
    3960:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>

	CLCD_voidSetPositoion(Copy_u8Row, Copy_u8Col);
    3964:	8e 81       	ldd	r24, Y+6	; 0x06
    3966:	6f 81       	ldd	r22, Y+7	; 0x07
    3968:	0e 94 c2 1c 	call	0x3984	; 0x3984 <CLCD_voidSetPositoion>

	CLCD_voidSendData(Copy_u8PatternLocation);
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
}
    3972:	27 96       	adiw	r28, 0x07	; 7
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <CLCD_voidSetPositoion>:

// The first step is to write the value of the character in the memory then
// if you want to display it on the screen just call the function of send data with the location
// or pattern location to the function of CLCD_voidSendData(0); for example 0 here is the first location
void CLCD_voidSetPositoion(u8 Copy_u8Row,u8 Copy_u8Col){
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	00 d0       	rcall	.+0      	; 0x398a <CLCD_voidSetPositoion+0x6>
    398a:	00 d0       	rcall	.+0      	; 0x398c <CLCD_voidSetPositoion+0x8>
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
    3990:	89 83       	std	Y+1, r24	; 0x01
    3992:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Row){
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	28 2f       	mov	r18, r24
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	3c 83       	std	Y+4, r19	; 0x04
    399c:	2b 83       	std	Y+3, r18	; 0x03
    399e:	8b 81       	ldd	r24, Y+3	; 0x03
    39a0:	9c 81       	ldd	r25, Y+4	; 0x04
    39a2:	81 30       	cpi	r24, 0x01	; 1
    39a4:	91 05       	cpc	r25, r1
    39a6:	31 f0       	breq	.+12     	; 0x39b4 <CLCD_voidSetPositoion+0x30>
    39a8:	2b 81       	ldd	r18, Y+3	; 0x03
    39aa:	3c 81       	ldd	r19, Y+4	; 0x04
    39ac:	22 30       	cpi	r18, 0x02	; 2
    39ae:	31 05       	cpc	r19, r1
    39b0:	31 f0       	breq	.+12     	; 0x39be <CLCD_voidSetPositoion+0x3a>
    39b2:	09 c0       	rjmp	.+18     	; 0x39c6 <CLCD_voidSetPositoion+0x42>

	case CLCD_ROW_1:
		CLCD_voidSendCommand(0x80 + Copy_u8Col - 1 );
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	81 58       	subi	r24, 0x81	; 129
    39b8:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>
    39bc:	04 c0       	rjmp	.+8      	; 0x39c6 <CLCD_voidSetPositoion+0x42>
		break;

	case CLCD_ROW_2:
		CLCD_voidSendCommand(0xc0 + Copy_u8Col - 1);
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	81 54       	subi	r24, 0x41	; 65
    39c2:	0e 94 03 1a 	call	0x3406	; 0x3406 <CLCD_voidSendCommand>
	default:
		break;
	}


}
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	08 95       	ret

000039d4 <CLCD_voidSendString>:

void CLCD_voidSendString(u8 * Copy_u8PtrToChar, u8 Copy_u8LengthOfStr){
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	00 d0       	rcall	.+0      	; 0x39da <CLCD_voidSendString+0x6>
    39da:	00 d0       	rcall	.+0      	; 0x39dc <CLCD_voidSendString+0x8>
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	9b 83       	std	Y+3, r25	; 0x03
    39e2:	8a 83       	std	Y+2, r24	; 0x02
    39e4:	6c 83       	std	Y+4, r22	; 0x04

	for(u8 i = 0; (i<Copy_u8LengthOfStr) && (Copy_u8PtrToChar[i] != '\0'); i++ ){
    39e6:	19 82       	std	Y+1, r1	; 0x01
    39e8:	0e c0       	rjmp	.+28     	; 0x3a06 <CLCD_voidSendString+0x32>

		CLCD_voidSendData(Copy_u8PtrToChar[i]);
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
    39ec:	28 2f       	mov	r18, r24
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	9b 81       	ldd	r25, Y+3	; 0x03
    39f4:	fc 01       	movw	r30, r24
    39f6:	e2 0f       	add	r30, r18
    39f8:	f3 1f       	adc	r31, r19
    39fa:	80 81       	ld	r24, Z
    39fc:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>

}

void CLCD_voidSendString(u8 * Copy_u8PtrToChar, u8 Copy_u8LengthOfStr){

	for(u8 i = 0; (i<Copy_u8LengthOfStr) && (Copy_u8PtrToChar[i] != '\0'); i++ ){
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	8f 5f       	subi	r24, 0xFF	; 255
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	99 81       	ldd	r25, Y+1	; 0x01
    3a08:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0a:	98 17       	cp	r25, r24
    3a0c:	58 f4       	brcc	.+22     	; 0x3a24 <CLCD_voidSendString+0x50>
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	28 2f       	mov	r18, r24
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	8a 81       	ldd	r24, Y+2	; 0x02
    3a16:	9b 81       	ldd	r25, Y+3	; 0x03
    3a18:	fc 01       	movw	r30, r24
    3a1a:	e2 0f       	add	r30, r18
    3a1c:	f3 1f       	adc	r31, r19
    3a1e:	80 81       	ld	r24, Z
    3a20:	88 23       	and	r24, r24
    3a22:	19 f7       	brne	.-58     	; 0x39ea <CLCD_voidSendString+0x16>

		CLCD_voidSendData(Copy_u8PtrToChar[i]);
	}

}
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(s16 Copy_s16Num){
    3a32:	df 93       	push	r29
    3a34:	cf 93       	push	r28
    3a36:	cd b7       	in	r28, 0x3d	; 61
    3a38:	de b7       	in	r29, 0x3e	; 62
    3a3a:	27 97       	sbiw	r28, 0x07	; 7
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	f8 94       	cli
    3a40:	de bf       	out	0x3e, r29	; 62
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	cd bf       	out	0x3d, r28	; 61
    3a46:	9f 83       	std	Y+7, r25	; 0x07
    3a48:	8e 83       	std	Y+6, r24	; 0x06

	u16 Local_u16Num = 0;
    3a4a:	1d 82       	std	Y+5, r1	; 0x05
    3a4c:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u16MulOf10 = 1;
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	9b 83       	std	Y+3, r25	; 0x03
    3a54:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u16Temp = 0;
    3a56:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s16Num == 0){
    3a58:	8e 81       	ldd	r24, Y+6	; 0x06
    3a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	21 f4       	brne	.+8      	; 0x3a68 <CLCD_voidSendNumber+0x36>

		CLCD_voidSendData('0');
    3a60:	80 e3       	ldi	r24, 0x30	; 48
    3a62:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
    3a66:	cb c0       	rjmp	.+406    	; 0x3bfe <CLCD_voidSendNumber+0x1cc>
	}

	else if(Copy_s16Num < 0){
    3a68:	8e 81       	ldd	r24, Y+6	; 0x06
    3a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a6c:	99 23       	and	r25, r25
    3a6e:	0c f0       	brlt	.+2      	; 0x3a72 <CLCD_voidSendNumber+0x40>
    3a70:	68 c0       	rjmp	.+208    	; 0x3b42 <CLCD_voidSendNumber+0x110>


		CLCD_voidSendData('-');
    3a72:	8d e2       	ldi	r24, 0x2D	; 45
    3a74:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
		Local_u16Num = -1 * Copy_s16Num;
    3a78:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a7c:	90 95       	com	r25
    3a7e:	81 95       	neg	r24
    3a80:	9f 4f       	sbci	r25, 0xFF	; 255
    3a82:	9d 83       	std	Y+5, r25	; 0x05
    3a84:	8c 83       	std	Y+4, r24	; 0x04
    3a86:	18 c0       	rjmp	.+48     	; 0x3ab8 <CLCD_voidSendNumber+0x86>

		while(Local_u16Num != 0){

			Local_u16Num /= 10;
    3a88:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a8c:	2a e0       	ldi	r18, 0x0A	; 10
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	b9 01       	movw	r22, r18
    3a92:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3a96:	cb 01       	movw	r24, r22
    3a98:	9d 83       	std	Y+5, r25	; 0x05
    3a9a:	8c 83       	std	Y+4, r24	; 0x04
			Local_u16MulOf10 *= 10;
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa0:	9c 01       	movw	r18, r24
    3aa2:	22 0f       	add	r18, r18
    3aa4:	33 1f       	adc	r19, r19
    3aa6:	c9 01       	movw	r24, r18
    3aa8:	88 0f       	add	r24, r24
    3aaa:	99 1f       	adc	r25, r25
    3aac:	88 0f       	add	r24, r24
    3aae:	99 1f       	adc	r25, r25
    3ab0:	82 0f       	add	r24, r18
    3ab2:	93 1f       	adc	r25, r19
    3ab4:	9b 83       	std	Y+3, r25	; 0x03
    3ab6:	8a 83       	std	Y+2, r24	; 0x02


		CLCD_voidSendData('-');
		Local_u16Num = -1 * Copy_s16Num;

		while(Local_u16Num != 0){
    3ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aba:	9d 81       	ldd	r25, Y+5	; 0x05
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	21 f7       	brne	.-56     	; 0x3a88 <CLCD_voidSendNumber+0x56>
			Local_u16Num /= 10;
			Local_u16MulOf10 *= 10;
		}


		Local_u16Num = -1 * Copy_s16Num;
    3ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ac4:	90 95       	com	r25
    3ac6:	81 95       	neg	r24
    3ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aca:	9d 83       	std	Y+5, r25	; 0x05
    3acc:	8c 83       	std	Y+4, r24	; 0x04
		Local_u16MulOf10 /= 10;
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad2:	2a e0       	ldi	r18, 0x0A	; 10
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	b9 01       	movw	r22, r18
    3ad8:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3adc:	cb 01       	movw	r24, r22
    3ade:	9b 83       	std	Y+3, r25	; 0x03
    3ae0:	8a 83       	std	Y+2, r24	; 0x02
    3ae2:	2a c0       	rjmp	.+84     	; 0x3b38 <CLCD_voidSendNumber+0x106>

		while(Local_u16MulOf10 != 0){

			Local_u16Temp = Local_u16Num / (Local_u16MulOf10);
    3ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae8:	2a 81       	ldd	r18, Y+2	; 0x02
    3aea:	3b 81       	ldd	r19, Y+3	; 0x03
    3aec:	b9 01       	movw	r22, r18
    3aee:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3af2:	cb 01       	movw	r24, r22
    3af4:	89 83       	std	Y+1, r24	; 0x01
			CLCD_voidSendData(Local_u16Temp + 48);
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	80 5d       	subi	r24, 0xD0	; 208
    3afa:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
			Local_u16Num = Local_u16Num - (Local_u16MulOf10 * Local_u16Temp);
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	28 2f       	mov	r18, r24
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	8a 81       	ldd	r24, Y+2	; 0x02
    3b06:	9b 81       	ldd	r25, Y+3	; 0x03
    3b08:	a9 01       	movw	r20, r18
    3b0a:	48 9f       	mul	r20, r24
    3b0c:	90 01       	movw	r18, r0
    3b0e:	49 9f       	mul	r20, r25
    3b10:	30 0d       	add	r19, r0
    3b12:	58 9f       	mul	r21, r24
    3b14:	30 0d       	add	r19, r0
    3b16:	11 24       	eor	r1, r1
    3b18:	8c 81       	ldd	r24, Y+4	; 0x04
    3b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b1c:	82 1b       	sub	r24, r18
    3b1e:	93 0b       	sbc	r25, r19
    3b20:	9d 83       	std	Y+5, r25	; 0x05
    3b22:	8c 83       	std	Y+4, r24	; 0x04
			Local_u16MulOf10 /= 10;
    3b24:	8a 81       	ldd	r24, Y+2	; 0x02
    3b26:	9b 81       	ldd	r25, Y+3	; 0x03
    3b28:	2a e0       	ldi	r18, 0x0A	; 10
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	b9 01       	movw	r22, r18
    3b2e:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3b32:	cb 01       	movw	r24, r22
    3b34:	9b 83       	std	Y+3, r25	; 0x03
    3b36:	8a 83       	std	Y+2, r24	; 0x02


		Local_u16Num = -1 * Copy_s16Num;
		Local_u16MulOf10 /= 10;

		while(Local_u16MulOf10 != 0){
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	91 f6       	brne	.-92     	; 0x3ae4 <CLCD_voidSendNumber+0xb2>
    3b40:	5e c0       	rjmp	.+188    	; 0x3bfe <CLCD_voidSendNumber+0x1cc>

		}
	}
	else {

		Local_u16Num = Copy_s16Num;
    3b42:	8e 81       	ldd	r24, Y+6	; 0x06
    3b44:	9f 81       	ldd	r25, Y+7	; 0x07
    3b46:	9d 83       	std	Y+5, r25	; 0x05
    3b48:	8c 83       	std	Y+4, r24	; 0x04
    3b4a:	18 c0       	rjmp	.+48     	; 0x3b7c <CLCD_voidSendNumber+0x14a>

		while(Local_u16Num != 0){

			Local_u16Num /= 10;
    3b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b50:	2a e0       	ldi	r18, 0x0A	; 10
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	b9 01       	movw	r22, r18
    3b56:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	9d 83       	std	Y+5, r25	; 0x05
    3b5e:	8c 83       	std	Y+4, r24	; 0x04
			Local_u16MulOf10 *= 10;
    3b60:	8a 81       	ldd	r24, Y+2	; 0x02
    3b62:	9b 81       	ldd	r25, Y+3	; 0x03
    3b64:	9c 01       	movw	r18, r24
    3b66:	22 0f       	add	r18, r18
    3b68:	33 1f       	adc	r19, r19
    3b6a:	c9 01       	movw	r24, r18
    3b6c:	88 0f       	add	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	82 0f       	add	r24, r18
    3b76:	93 1f       	adc	r25, r19
    3b78:	9b 83       	std	Y+3, r25	; 0x03
    3b7a:	8a 83       	std	Y+2, r24	; 0x02
	}
	else {

		Local_u16Num = Copy_s16Num;

		while(Local_u16Num != 0){
    3b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	21 f7       	brne	.-56     	; 0x3b4c <CLCD_voidSendNumber+0x11a>

		}



		Local_u16Num = Copy_s16Num;
    3b84:	8e 81       	ldd	r24, Y+6	; 0x06
    3b86:	9f 81       	ldd	r25, Y+7	; 0x07
    3b88:	9d 83       	std	Y+5, r25	; 0x05
    3b8a:	8c 83       	std	Y+4, r24	; 0x04
		Local_u16MulOf10 /= 10;
    3b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b90:	2a e0       	ldi	r18, 0x0A	; 10
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	b9 01       	movw	r22, r18
    3b96:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	9b 83       	std	Y+3, r25	; 0x03
    3b9e:	8a 83       	std	Y+2, r24	; 0x02
    3ba0:	2a c0       	rjmp	.+84     	; 0x3bf6 <CLCD_voidSendNumber+0x1c4>

		while(Local_u16MulOf10 != 0){

			Local_u16Temp = Local_u16Num / (Local_u16MulOf10);
    3ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ba8:	3b 81       	ldd	r19, Y+3	; 0x03
    3baa:	b9 01       	movw	r22, r18
    3bac:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	89 83       	std	Y+1, r24	; 0x01
			CLCD_voidSendData(Local_u16Temp + 48);
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	80 5d       	subi	r24, 0xD0	; 208
    3bb8:	0e 94 5f 1b 	call	0x36be	; 0x36be <CLCD_voidSendData>
			Local_u16Num = Local_u16Num - (Local_u16MulOf10 * Local_u16Temp);
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc6:	a9 01       	movw	r20, r18
    3bc8:	48 9f       	mul	r20, r24
    3bca:	90 01       	movw	r18, r0
    3bcc:	49 9f       	mul	r20, r25
    3bce:	30 0d       	add	r19, r0
    3bd0:	58 9f       	mul	r21, r24
    3bd2:	30 0d       	add	r19, r0
    3bd4:	11 24       	eor	r1, r1
    3bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bda:	82 1b       	sub	r24, r18
    3bdc:	93 0b       	sbc	r25, r19
    3bde:	9d 83       	std	Y+5, r25	; 0x05
    3be0:	8c 83       	std	Y+4, r24	; 0x04
			Local_u16MulOf10 /= 10;
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	9b 81       	ldd	r25, Y+3	; 0x03
    3be6:	2a e0       	ldi	r18, 0x0A	; 10
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	b9 01       	movw	r22, r18
    3bec:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	9b 83       	std	Y+3, r25	; 0x03
    3bf4:	8a 83       	std	Y+2, r24	; 0x02


		Local_u16Num = Copy_s16Num;
		Local_u16MulOf10 /= 10;

		while(Local_u16MulOf10 != 0){
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	91 f6       	brne	.-92     	; 0x3ba2 <CLCD_voidSendNumber+0x170>
			Local_u16MulOf10 /= 10;


		}	}

}
    3bfe:	27 96       	adiw	r28, 0x07	; 7
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <app>:
volatile u8 copy_value = 0 ;
volatile u8 ssd1_value = 0 ;
volatile u8 ssd2_value = 0 ;

void app(void)
{
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
	copy_value++ ;
    3c18:	80 91 96 00 	lds	r24, 0x0096
    3c1c:	8f 5f       	subi	r24, 0xFF	; 255
    3c1e:	80 93 96 00 	sts	0x0096, r24
	ssd1_value = copy_value/10 ;
    3c22:	80 91 96 00 	lds	r24, 0x0096
    3c26:	9a e0       	ldi	r25, 0x0A	; 10
    3c28:	69 2f       	mov	r22, r25
    3c2a:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <__udivmodqi4>
    3c2e:	80 93 97 00 	sts	0x0097, r24
	ssd2_value = copy_value%10 ;
    3c32:	80 91 96 00 	lds	r24, 0x0096
    3c36:	9a e0       	ldi	r25, 0x0A	; 10
    3c38:	69 2f       	mov	r22, r25
    3c3a:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <__udivmodqi4>
    3c3e:	89 2f       	mov	r24, r25
    3c40:	80 93 98 00 	sts	0x0098, r24
}
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	08 95       	ret

00003c4a <main>:

int main(void)
{
    3c4a:	df 93       	push	r29
    3c4c:	cf 93       	push	r28
    3c4e:	00 d0       	rcall	.+0      	; 0x3c50 <main+0x6>
    3c50:	00 d0       	rcall	.+0      	; 0x3c52 <main+0x8>
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62

	GIE_voidEnable();
    3c56:	0e 94 f6 08 	call	0x11ec	; 0x11ec <GIE_voidEnable>
	SSD_t SSD1 = { DIO_PORTA , SSD_COMMON_ANODE };
    3c5a:	19 82       	std	Y+1, r1	; 0x01
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	8a 83       	std	Y+2, r24	; 0x02
	SSD_t SSD2 = { DIO_PORTC , SSD_COMMON_ANODE };
    3c60:	82 e0       	ldi	r24, 0x02	; 2
    3c62:	8b 83       	std	Y+3, r24	; 0x03
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	8c 83       	std	Y+4, r24	; 0x04
	SSD_voidInit(&SSD1);
    3c68:	ce 01       	movw	r24, r28
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	0e 94 bc 14 	call	0x2978	; 0x2978 <SSD_voidInit>
	SSD_voidInit(&SSD2);
    3c70:	ce 01       	movw	r24, r28
    3c72:	03 96       	adiw	r24, 0x03	; 3
    3c74:	0e 94 bc 14 	call	0x2978	; 0x2978 <SSD_voidInit>

	SSD_voidEnable( &SSD1 , 0 );
    3c78:	ce 01       	movw	r24, r28
    3c7a:	01 96       	adiw	r24, 0x01	; 1
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <SSD_voidEnable>
	SSD_voidEnable( &SSD2 , 0 );
    3c82:	ce 01       	movw	r24, r28
    3c84:	03 96       	adiw	r24, 0x03	; 3
    3c86:	60 e0       	ldi	r22, 0x00	; 0
    3c88:	0e 94 ee 14 	call	0x29dc	; 0x29dc <SSD_voidEnable>

	EXTI_voidChangeSenseControl(EXTI_INT2 , EXTI_FAILING_EDGE );
    3c8c:	82 e0       	ldi	r24, 0x02	; 2
    3c8e:	61 e0       	ldi	r22, 0x01	; 1
    3c90:	0e 94 12 09 	call	0x1224	; 0x1224 <EXTI_voidChangeSenseControl>
	EXTI_voidEnable(EXTI_INT2);
    3c94:	82 e0       	ldi	r24, 0x02	; 2
    3c96:	0e 94 11 0a 	call	0x1422	; 0x1422 <EXTI_voidEnable>
	EXTI_voidSetCallBack(EXTI_INT2 , app);
    3c9a:	28 e0       	ldi	r18, 0x08	; 8
    3c9c:	3e e1       	ldi	r19, 0x1E	; 30
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	b9 01       	movw	r22, r18
    3ca2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <EXTI_voidSetCallBack>

	while(1)
	{
		SSD_voidEnable( &SSD1 , ssd1_value );
    3ca6:	20 91 97 00 	lds	r18, 0x0097
    3caa:	ce 01       	movw	r24, r28
    3cac:	01 96       	adiw	r24, 0x01	; 1
    3cae:	62 2f       	mov	r22, r18
    3cb0:	0e 94 ee 14 	call	0x29dc	; 0x29dc <SSD_voidEnable>
		SSD_voidEnable( &SSD2 , ssd2_value );
    3cb4:	20 91 98 00 	lds	r18, 0x0098
    3cb8:	ce 01       	movw	r24, r28
    3cba:	03 96       	adiw	r24, 0x03	; 3
    3cbc:	62 2f       	mov	r22, r18
    3cbe:	0e 94 ee 14 	call	0x29dc	; 0x29dc <SSD_voidEnable>
    3cc2:	f1 cf       	rjmp	.-30     	; 0x3ca6 <main+0x5c>

00003cc4 <__udivmodqi4>:
    3cc4:	99 1b       	sub	r25, r25
    3cc6:	79 e0       	ldi	r23, 0x09	; 9
    3cc8:	04 c0       	rjmp	.+8      	; 0x3cd2 <__udivmodqi4_ep>

00003cca <__udivmodqi4_loop>:
    3cca:	99 1f       	adc	r25, r25
    3ccc:	96 17       	cp	r25, r22
    3cce:	08 f0       	brcs	.+2      	; 0x3cd2 <__udivmodqi4_ep>
    3cd0:	96 1b       	sub	r25, r22

00003cd2 <__udivmodqi4_ep>:
    3cd2:	88 1f       	adc	r24, r24
    3cd4:	7a 95       	dec	r23
    3cd6:	c9 f7       	brne	.-14     	; 0x3cca <__udivmodqi4_loop>
    3cd8:	80 95       	com	r24
    3cda:	08 95       	ret

00003cdc <__udivmodhi4>:
    3cdc:	aa 1b       	sub	r26, r26
    3cde:	bb 1b       	sub	r27, r27
    3ce0:	51 e1       	ldi	r21, 0x11	; 17
    3ce2:	07 c0       	rjmp	.+14     	; 0x3cf2 <__udivmodhi4_ep>

00003ce4 <__udivmodhi4_loop>:
    3ce4:	aa 1f       	adc	r26, r26
    3ce6:	bb 1f       	adc	r27, r27
    3ce8:	a6 17       	cp	r26, r22
    3cea:	b7 07       	cpc	r27, r23
    3cec:	10 f0       	brcs	.+4      	; 0x3cf2 <__udivmodhi4_ep>
    3cee:	a6 1b       	sub	r26, r22
    3cf0:	b7 0b       	sbc	r27, r23

00003cf2 <__udivmodhi4_ep>:
    3cf2:	88 1f       	adc	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	5a 95       	dec	r21
    3cf8:	a9 f7       	brne	.-22     	; 0x3ce4 <__udivmodhi4_loop>
    3cfa:	80 95       	com	r24
    3cfc:	90 95       	com	r25
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	08 95       	ret

00003d04 <__prologue_saves__>:
    3d04:	2f 92       	push	r2
    3d06:	3f 92       	push	r3
    3d08:	4f 92       	push	r4
    3d0a:	5f 92       	push	r5
    3d0c:	6f 92       	push	r6
    3d0e:	7f 92       	push	r7
    3d10:	8f 92       	push	r8
    3d12:	9f 92       	push	r9
    3d14:	af 92       	push	r10
    3d16:	bf 92       	push	r11
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	ca 1b       	sub	r28, r26
    3d2e:	db 0b       	sbc	r29, r27
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	09 94       	ijmp

00003d3c <__epilogue_restores__>:
    3d3c:	2a 88       	ldd	r2, Y+18	; 0x12
    3d3e:	39 88       	ldd	r3, Y+17	; 0x11
    3d40:	48 88       	ldd	r4, Y+16	; 0x10
    3d42:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d44:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d46:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d48:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d4e:	b9 84       	ldd	r11, Y+9	; 0x09
    3d50:	c8 84       	ldd	r12, Y+8	; 0x08
    3d52:	df 80       	ldd	r13, Y+7	; 0x07
    3d54:	ee 80       	ldd	r14, Y+6	; 0x06
    3d56:	fd 80       	ldd	r15, Y+5	; 0x05
    3d58:	0c 81       	ldd	r16, Y+4	; 0x04
    3d5a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d5c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d60:	ce 0f       	add	r28, r30
    3d62:	d1 1d       	adc	r29, r1
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	ed 01       	movw	r28, r26
    3d70:	08 95       	ret

00003d72 <_exit>:
    3d72:	f8 94       	cli

00003d74 <__stop_program>:
    3d74:	ff cf       	rjmp	.-2      	; 0x3d74 <__stop_program>
